{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>The Graphic Server Protocol (GSP) is meant to be an API between hardware and software, targeted at developpers who do not want to dive into the arcane of OpenGL, Metal or Vulkan but still want to benefit from GPU speed, versatily and quality.</p> <p>The overall goal of GSP is not to provide a general graphics API but rather to address only scientific visualization, which requires a far fewer number of objects and concepts, with specific requirements on rendering quality though. The API is voluntarily small and targets the smallest set of visuals that allow to render the vast majority of scientific plots (2d or 3d).</p>"},{"location":"api/protocol.html","title":"Protocol","text":""},{"location":"api/protocol.html#header-part","title":"Header Part","text":"<pre><code>/**\n * Defines an integer number in the range of -2^31 to 2^31 - 1.\n */\nexport type integer = number;\n</code></pre>"},{"location":"api/protocol.html#content-part","title":"Content Part","text":""},{"location":"api/protocol.html#base-types","title":"Base Types","text":""},{"location":"api/protocol.html#request-message","title":"Request Message","text":""},{"location":"api/protocol.html#response-message","title":"Response Message","text":""},{"location":"api/protocol.html#notification-message","title":"Notification Message","text":""},{"location":"api/core/buffer.html","title":"Buffer","text":""},{"location":"api/core/buffer.html#gsp.core.buffer.Buffer","title":"Buffer","text":"<pre><code>Buffer(\n    count: int,\n    dtype: dtype,\n    data: memoryview | bytes = None,\n)\n</code></pre> <p>Buffer represents a structured view on some Data or Buffer. Buffer can be a partial or whole view on the underlying source.</p> <p>Create a new Buffer.</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>Number of item</p> required <code>dtype</code> <code>dtype</code> <p>Type of the item</p> required <code>data</code> <code>memoryview | bytes</code> <p>Content of of the buffer</p> <code>None</code>"},{"location":"api/core/buffer.html#gsp.core.buffer.Buffer.set_data","title":"set_data","text":"<pre><code>set_data(offset: int, data: memoryview)\n</code></pre> <p>Update buffer content at given offset with new data.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>Offset in bytes where to start update</p> required <code>data</code> <code>memoryview</code> <p>Content to update with.</p> required"},{"location":"api/core/canvas.html","title":"Canvas","text":""},{"location":"api/core/canvas.html#gsp.core.canvas.Canvas","title":"Canvas","text":"<pre><code>Canvas(width: int, height: int, dpi: float)\n</code></pre> <p>A Canvas is a two-dimensional drawing area of size width \u00d7 height pixels using the specified dpi (dots per inch).</p> Info <ul> <li>A canvas uses a standard color space with at least 8 bits per channel.</li> <li>Blending mode is alpha blending</li> <li>The <code>(0,0)</code> coordinates corresponds to the bottom left corner.</li> <li>A typographical point is 1/72 inch.</li> </ul> Example PYTHONTEXTJSON <pre><code>from gsp.core.canvas import Canvas\ncanvas = Canvas(512, 512, 101.0)\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2025-03-18T15:02:33.339726 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 101.0 (float)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1742306553.339726,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 101.0\n      }\n    }\n  ]\n}\n</code></pre> <p>Create a new Canvas</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of the drawing area in pixels.</p> required <code>height</code> <code>int</code> <p>Height of the drawing area in pixels.</p> required <code>dpi</code> <code>float</code> <p>Dots per inch</p> required"},{"location":"api/core/canvas.html#gsp.core.canvas.Canvas.render","title":"render","text":"<pre><code>render(target: str)\n</code></pre> <p>Render the canvas the to specified target. If no target is specified, return a raw image as bytes.</p> <pre><code>python docs/snippets/Canvas_render.py\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>Filename of the target</p> required"},{"location":"api/core/data.html","title":"Data","text":""},{"location":"api/core/data.html#gsp.core.data.Data","title":"Data","text":"<pre><code>Data(uri: str = '', nbytes: int = 0, dtype: list = None)\n</code></pre> <p>Data represents a block of raw binary data, with an optional structure. This data is built using the provided uri that may either point to an external file, or be a data URI that encodes the binary data directly in the JSON file. When an uri is provided, data will is fetched just in time and stored locally. If no uri has been provided, an empty data is created ex-nihilo, just in time. Data can be modified and is tracked for any modification.</p> <pre><code>python docs/snippets/Data_init.py\n</code></pre> <p>Data represents a block of raw binary data, with an optional structure.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Uniform Resource Identifier from where to fetch data.</p> <code>''</code> <code>nbytes</code> <code>int</code> <p>Number of bytes in the data. This is used to create data ex-nihilo if no uri has been provided. If a dtype is provided, the nbytes is discarded in favor of the size of the provided structure.</p> <code>0</code> <code>dtype</code> <code>list</code> <p>Description of the internal structure of the data as a list of (<code>name</code> (str), <code>type</code> (str), <code>count</code> (int)) items.</p> <p>with:</p> Type Kind <code>i[1,2,4]</code> signed integer (8,16, 32 bits) <code>u[1,2,4]</code> unsigned integer (8,16, 32 bits) <code>f[2,4,8]</code> float (16, 32, 64 bits) <code>m</code> timedelta (64 bits) <code>M</code> datetime (64 bits) <code>U[n]</code> unicode string (n x 16 bits) <code>None</code>"},{"location":"api/core/data.html#gsp.core.data.Data.set_data","title":"set_data","text":"<pre><code>set_data(offset: int, data: bytes)\n</code></pre> <p>Update data content at given offset with new data.</p> <pre><code>python docs/snippets/Data_set_data.py\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>Offset in bytes where to start update</p> required <code>data</code> <code>bytes</code> <p>Content to update with.</p> required"},{"location":"api/core/types.html","title":"Types","text":""},{"location":"api/core/types.html#gsp.core.types.Measure","title":"Measure","text":"<pre><code>Measure(value: float, unit: str = None)\n</code></pre> <p>Representation of a measure</p> <p>Representation of a measure</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>Values of the measure</p> required <code>unit</code> <code>str</code> <p>Unit of the measure</p> <code>None</code>"},{"location":"api/core/types.html#gsp.core.types.Marker","title":"Marker","text":"<p>Attributes</p> Name Visual Reference <code>point</code> material-circle <code>triangle</code> material-triangle <code>square</code> material-square <code>minus</code> material-minus-thick <code>plus</code> material-plus-thick <code>cross</code> material-close-thick <code>star</code> material-star <code>club</code> material-cards-club <code>heart</code> material-cards-heart <code>spade</code> material-cards-spade <code>diamond</code> material-cards-diamond <code>arrow</code> material-arrow-up-thick"},{"location":"api/core/types.html#gsp.core.types.LineStyle","title":"LineStyle","text":""},{"location":"api/core/types.html#gsp.core.types.LineCap","title":"LineCap","text":""},{"location":"api/core/types.html#gsp.core.types.LineJoin","title":"LineJoin","text":""},{"location":"api/core/viewport.html","title":"Viewport","text":""},{"location":"api/core/viewport.html#gsp.core.viewport.Viewport","title":"Viewport","text":"<pre><code>Viewport(\n    canvas: Canvas,\n    x: Transform | float | int,\n    y: Transform | float | int,\n    width: Transform | float | int,\n    height: Transform | float | int,\n    color: Color,\n)\n</code></pre> <p>A viewport is a rectangular two-dimensional surface from a canvas, located at (x, y) coordinates (bottom left corner) with size equal to width\u00d7height pixels and a background color.</p> <p>Notes</p> <p>Future implementation will allows viewports to have an arbitrary rotation.</p> Example PYTHONTEXTJSON <pre><code>from gsp.core import Canvas, Viewport\ncanvas = Canvas(512, 512, 100.0)\nviewport = Viewport(canvas, 0, 0, 512, 512, (0,0,0,1))\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2025-03-18T15:02:33.441212 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 100.0 (float)\n\n2. COMMAND\n     - METHOD: \"core.Viewport\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2025-03-18T15:02:33.441365 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - CANVAS_ID: 1 (Canvas)\n     - X: 0 (Transform | float | int)\n     - Y: 0 (Transform | float | int)\n     - WIDTH: 512 (Transform | float | int)\n     - HEIGHT: 512 (Transform | float | int)\n     - COLOR: Color(r=0, g=0, b=0, a=1) (converted) (Color)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1742306553.441212,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 100.0\n      }\n    },\n    {\n      \"method\": \"core.Viewport\",\n      \"id\": 2,\n      \"timestamp\": 1742306553.441365,\n      \"parameters\": {\n        \"id\": 2,\n        \"canvas(id)\": 1,\n        \"x\": 0,\n        \"y\": 0,\n        \"width\": 512,\n        \"height\": 512,\n        \"color\": [\n          0,\n          0,\n          0,\n          1\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <p>A viewport is a rectangular two-dimensional surface.</p> <p>Parameters:</p> Name Type Description Default <code>canvas</code> <code>Canvas</code> <p>Canvas where to create the viewport</p> required <code>x</code> <code>Transform | float | int</code> <p>X coordinate of the viewport bottom left corner</p> required <code>y</code> <code>Transform | float | int</code> <p>Y coordinate of the viewport bottom left corner</p> required <code>width</code> <code>Transform | float | int</code> <p>Width of the viewport in pixels.</p> required <code>height</code> <code>Transform | float | int</code> <p>Height of the viewport in pixels.</p> required <code>color</code> <code>Color</code> <p>Background color of the viewport</p> required"},{"location":"api/core/viewport.html#gsp.core.viewport.Viewport.render","title":"render","text":"<pre><code>render(target: str)\n</code></pre> <p>Render the viewport to the specified target. If no target is specified, return a raw image as bytes.</p> <pre><code>python docs/snippets/Viewport_render.py\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>Filename of the target</p> required"},{"location":"api/io/command.html","title":"Command","text":""},{"location":"api/io/command.html#gsp.io.command.CommandQueue","title":"CommandQueue","text":"<pre><code>CommandQueue(name: str = 'active')\n</code></pre> <p>A command queue allows to store a list of Command that can be ran later.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the queue. The default queue is the \"active\" one, that is, the latest created one.</p> <code>'active'</code>"},{"location":"api/io/command.html#gsp.io.command.Command","title":"Command","text":"<pre><code>Command(\n    classname, methodname, parameters, annotations=None\n)\n</code></pre> <p>Generic command with a unique id.</p> <p>Build a new command with a unique command id (cid)</p> <p>Parameters:</p> Name Type Description Default <code>classname</code> <code>string</code> <p>Name of the class</p> required <code>methodname</code> <code>string</code> <p>Name of the method</p> required <code>parameters</code> <code>dict</code> <p>Dictionnary of parameters</p> required <code>annotations</code> <code>dict</code> <p>Annoated type of the called method</p> <code>None</code> <p>Examples:</p> <pre><code>class Foo(Object):\n    def __init__(self, value : int):\n        self.value = value\n\ncommand = Command(\"Foo\", \"__init__\", {\"value\" : 1})\nfoo = command.execute()\n</code></pre>"},{"location":"api/io/command.html#gsp.io.command.command","title":"command","text":"<pre><code>command(name=None)\n</code></pre> <p>Function decorator that creates a command when the function is called and optionally record it. The name of the method can can be overriden with the provided name.</p>"},{"location":"api/transform/accessors.html","title":"Accessors","text":""},{"location":"api/transform/accessors.html#gsp.transform.Accessor","title":"Accessor","text":"<pre><code>Accessor(\n    buffer: Transform | Buffer = None, key: str = None\n)\n</code></pre> <p>Accessor transform allows to access a specific field in a Buffer</p> <p>Accessor transform allows to access a specific field in a Buffer.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Name of the field to access</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.X","title":"X","text":"<pre><code>X(buffer: Transform | Buffer = None)\n</code></pre> <p>X Accessor (first field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.X.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.X.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Y","title":"Y","text":"<pre><code>Y(buffer: Transform | Buffer = None)\n</code></pre> <p>Y Accessor (second field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Y.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Y.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Z","title":"Z","text":"<pre><code>Z(buffer: Transform | Buffer = None)\n</code></pre> <p>Z Accessor (third field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Z.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Z.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.W","title":"W","text":"<pre><code>W(buffer: Transform | Buffer = None)\n</code></pre> <p>W Accessor (fourth field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.W.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.W.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.R","title":"R","text":"<pre><code>R(buffer: Transform | Buffer = None)\n</code></pre> <p>R Accessor (first field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.R.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.R.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.G","title":"G","text":"<pre><code>G(buffer: Transform | Buffer = None)\n</code></pre> <p>G Accessor (second field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.G.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.G.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.B","title":"B","text":"<pre><code>B(buffer: Transform | Buffer = None)\n</code></pre> <p>B Accessor (third field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.B.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.B.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.A","title":"A","text":"<pre><code>A(buffer: Transform | Buffer = None)\n</code></pre> <p>A Accessor (fourth field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.A.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.A.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/colormap.html","title":"Colormap","text":""},{"location":"api/transform/colormap.html#gsp.transform.Colormap","title":"Colormap","text":"<pre><code>Colormap(colormap: str = None)\n</code></pre> <p>Colormap transform allows to map a scalar to a color</p> <p>Colormap transform allows to map a scalar to a color</p> <pre><code>python docs/snippets/Colormap_init.py\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>colormap</code> <code>str</code> <p>Name of the colormap</p> <code>None</code>"},{"location":"api/transform/colormap.html#gsp.transform.Colormap.set_colormap","title":"set_colormap","text":"<pre><code>set_colormap(colormap: str)\n</code></pre> <p>Set the colormap</p> <pre><code>python docs/snippets/Colormap_set_colormap.py\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>colormap</code> <code>str</code> <p>Name of the colormap</p> required"},{"location":"api/transform/light.html","title":"Light","text":""},{"location":"api/transform/light.html#gsp.transform.Light","title":"Light","text":"<pre><code>Light(\n    direction: list = (1, 1, 1),\n    ambient_color: Color = (1, 0, 0, 0.2),\n    diffuse_color: Color = (1, 1, 1, 0.8),\n    specular_color: Color = (1, 1, 1, 0),\n)\n</code></pre> <p>Light transform allows to modify faces color according to light parameters</p> <p>Light transform allows to modify faces color according to light parameters</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>list</code> <p>Direction of the light</p> <code>(1, 1, 1)</code> <code>ambient_color</code> <code>Color</code> <p>Ambient color, alpha component being strength</p> <code>(1, 0, 0, 0.2)</code> <code>diffuse_color</code> <code>Color</code> <p>Diffuse color, alpha component being strength</p> <code>(1, 1, 1, 0.8)</code> <code>specular_color</code> <code>Color</code> <p>Specular color, alpha component being shininess</p> <code>(1, 1, 1, 0)</code>"},{"location":"api/transform/measures.html","title":"Measures","text":""},{"location":"api/transform/measures.html#gsp.transform.Measure","title":"Measure","text":"<pre><code>Measure()\n</code></pre> <p>A Measure transform allows to convert a measure expressed in some units (Pixel, Point, Inch, etc.) to normalized device coordinates ([-1,+1] x [-1,+1]). This conversion is always relative to a given Viewport whose width and height dictates the conversion.</p> <p>Notes</p> <p>The normalization of a measure (conversion to NDC) migth be different on the x or y axis depending on the size of the related viewport. This means, for example, that the expression <code>10*pixel</code> is translated differently along <code>x</code> (1st component) and <code>y</code> axis (second component). The <code>z</code> coordinate is not changed during conversion since measures are targeting 2D coordinates.</p> <p>Examples:</p> <pre><code>canvas = core.Canvas(512, 512, 100.0)\nviewport = core.Viewport(canvas, color=(1,1,0,1))\n\n# 10 pixels from bottom left corner\npixel = transform.Pixel()\nP = [-1,-1,0] + 10*pixel\n\n# 10 points from left, 20 points from bottom\npoint = transform.Point()\nP = [-1,-1,0] + (10,20,0)*point\n</code></pre>"},{"location":"api/transform/measures.html#gsp.transform.Pixel","title":"Pixel","text":"<pre><code>Pixel()\n</code></pre> <p>Conversion of a measure to pixel.</p>"},{"location":"api/transform/measures.html#gsp.transform.Point","title":"Point","text":"<pre><code>Point()\n</code></pre> <p>Conversion of a measure to point</p>"},{"location":"api/transform/measures.html#gsp.transform.Inch","title":"Inch","text":"<pre><code>Inch()\n</code></pre> <p>Conversion of a measure to inch.</p>"},{"location":"api/transform/measures.html#gsp.transform.Millimeter","title":"Millimeter","text":"<pre><code>Millimeter()\n</code></pre> <p>Conversion of a measure to millimeter</p>"},{"location":"api/transform/measures.html#gsp.transform.Centimeter","title":"Centimeter","text":"<pre><code>Centimeter()\n</code></pre> <p>Conversion of a measure to centimeter</p>"},{"location":"api/transform/measures.html#gsp.transform.Meter","title":"Meter","text":"<pre><code>Meter()\n</code></pre> <p>Conversion of a measure to meter</p>"},{"location":"api/transform/measures.html#gsp.transform.Kilometer","title":"Kilometer","text":"<pre><code>Kilometer()\n</code></pre> <p>Conversion of a measure to kilometer</p>"},{"location":"api/transform/operators.html","title":"Operators","text":""},{"location":"api/transform/operators.html#gsp.transform.Operator","title":"Operator","text":"<pre><code>Operator(\n    operator: str,\n    left: Transform | Buffer | int | float = None,\n    right: Transform | Buffer | int | float = None,\n)\n</code></pre> <p>Arithmetic operator to compose two transforms</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator description, one of: <code>+</code> (addition), <code>-</code> (subtraction), <code>/</code> (division), <code>*</code> (multiplication),</p> required <code>left</code> <code>Transform | Buffer | int | float</code> <p>Left operand (transform or buffer)</p> <code>None</code> <code>right</code> <code>Transform | Buffer | int | float</code> <p>Right operand (transform or buffer)</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Operator.set_operator","title":"set_operator","text":"<pre><code>set_operator(operator: str)\n</code></pre> <p>Set operator</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator</p> required"},{"location":"api/transform/operators.html#gsp.transform.Operator.set_left","title":"set_left","text":"<pre><code>set_left(left: Transform | Buffer | float | int)\n</code></pre> <p>Set left operand</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Transform | Buffer | float | int</code> <p>Left operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Operator.set_right","title":"set_right","text":"<pre><code>set_right(right: Transform | Buffer | float | int)\n</code></pre> <p>Set right operand</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Transform | Buffer | float | int</code> <p>Righ operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Add","title":"Add","text":"<pre><code>Add(\n    left: Transform | Buffer | float | int = None,\n    right: Transform | Buffer | float | int = None,\n)\n</code></pre> <p>Arithmetic addition of left and right</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Shallow copy</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Add.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Add.set_left","title":"set_left","text":"<pre><code>set_left(left: Transform | Buffer | float | int)\n</code></pre> <p>Set left operand</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Transform | Buffer | float | int</code> <p>Left operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Add.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Add.set_operator","title":"set_operator","text":"<pre><code>set_operator(operator: str)\n</code></pre> <p>Set operator</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator</p> required"},{"location":"api/transform/operators.html#gsp.transform.Add.set_right","title":"set_right","text":"<pre><code>set_right(right: Transform | Buffer | float | int)\n</code></pre> <p>Set right operand</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Transform | Buffer | float | int</code> <p>Righ operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Sub","title":"Sub","text":"<pre><code>Sub(\n    left: Transform | Buffer | float | int = None,\n    right: Transform | Buffer | float | int = None,\n)\n</code></pre> <p>Arithmetic subtraction of left and right</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Shallow copy</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_left","title":"set_left","text":"<pre><code>set_left(left: Transform | Buffer | float | int)\n</code></pre> <p>Set left operand</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Transform | Buffer | float | int</code> <p>Left operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_operator","title":"set_operator","text":"<pre><code>set_operator(operator: str)\n</code></pre> <p>Set operator</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator</p> required"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_right","title":"set_right","text":"<pre><code>set_right(right: Transform | Buffer | float | int)\n</code></pre> <p>Set right operand</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Transform | Buffer | float | int</code> <p>Righ operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Mul","title":"Mul","text":"<pre><code>Mul(\n    left: Transform | Buffer | float | int = None,\n    right: Transform | Buffer | float | int = None,\n)\n</code></pre> <p>Arithmetic multiplication of left and right</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Shallow copy</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_left","title":"set_left","text":"<pre><code>set_left(left: Transform | Buffer | float | int)\n</code></pre> <p>Set left operand</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Transform | Buffer | float | int</code> <p>Left operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_operator","title":"set_operator","text":"<pre><code>set_operator(operator: str)\n</code></pre> <p>Set operator</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator</p> required"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_right","title":"set_right","text":"<pre><code>set_right(right: Transform | Buffer | float | int)\n</code></pre> <p>Set right operand</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Transform | Buffer | float | int</code> <p>Righ operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Div","title":"Div","text":"<pre><code>Div(\n    left: Transform | Buffer | float | int = None,\n    right: Transform | Buffer | float | int = None,\n)\n</code></pre> <p>Arithmetic division of left and right</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Shallow copy</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Div.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Div.set_left","title":"set_left","text":"<pre><code>set_left(left: Transform | Buffer | float | int)\n</code></pre> <p>Set left operand</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Transform | Buffer | float | int</code> <p>Left operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Div.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Div.set_operator","title":"set_operator","text":"<pre><code>set_operator(operator: str)\n</code></pre> <p>Set operator</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator</p> required"},{"location":"api/transform/operators.html#gsp.transform.Div.set_right","title":"set_right","text":"<pre><code>set_right(right: Transform | Buffer | float | int)\n</code></pre> <p>Set right operand</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Transform | Buffer | float | int</code> <p>Righ operand (transform or buffer)</p> required"},{"location":"api/transform/out.html","title":"Out","text":""},{"location":"api/transform/out.html#gsp.transform.Out","title":"Out","text":"<pre><code>Out(name: str = None)\n</code></pre> <p>An out transform is a just in time (JIT) transform that allows to access a variable that is produced by a visual during rendering.</p> <p>Build the transform</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the buffer that have been produced by the visual. A specific key can be specified using the dot notation (e.g. \"screen.x\", \"screen.yx\").</p> <code>None</code>"},{"location":"api/transform/out.html#gsp.transform.Out.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/out.html#gsp.transform.Out.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/out.html#gsp.transform.Out.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/out.html#gsp.transform.Out.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/out.html#gsp.transform.Out.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/out.html#gsp.transform.Out.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Copy the transform</p>"},{"location":"api/transform/out.html#gsp.transform.Out.evaluate","title":"evaluate","text":"<pre><code>evaluate(variables: dict)\n</code></pre> <p>Evaluate the transform</p> <p>Parameters:</p> Name Type Description Default <code>variables</code> <code>dict</code> <p>Dictionary of out variables produced by a visual</p> required"},{"location":"api/transform/out.html#gsp.transform.Out.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/out.html#gsp.transform.Out.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/out.html#gsp.transform.Out.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/transform.html","title":"Transform","text":""},{"location":"api/transform/transform.html#gsp.transform.Transform","title":"Transform","text":"<pre><code>Transform(\n    base: Transform = None,\n    next: Transform = None,\n    buffer: Buffer = None,\n)\n</code></pre> <p>A Transform allows to apply an arbitratry transformation to a buffer. Any transform can be bound to a specific buffer and used in place of a Buffer where needed. Several transforms can be chained or composed together.</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on. When non null, all transform parameters are read from the base.</p> <code>None</code> <code>next</code> <code>Transform</code> <p>A transformation can be chained with another transform (<code>next</code>). In such case, the <code>next</code> transform is applied first and result is passed to the current transform.</p> <code>None</code> <code>buffer</code> <code>Buffer</code> <p>Buffer on which to apply the transform. When non null, the transformation is bound and cannot be modified anymore.</p> <code>None</code>"},{"location":"api/transform/transform.html#gsp.transform.Transform.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/transform.html#gsp.transform.Transform.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/transform.html#gsp.transform.Transform.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform | Buffer | float | int = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/visual/markers.html","title":"Markers","text":""},{"location":"api/visual/markers.html#gsp.visual.Markers","title":"Markers","text":"<pre><code>Markers(\n    positions: Transform | Buffer,\n    types: Transform | Buffer | Marker,\n    sizes: Transform | Buffer | float,\n    axis: Transform | Buffer | Vec3,\n    angles: Transform | Buffer | float,\n    fill_colors: Transform | Buffer | Color,\n    line_colors: Transform | Buffer | Color,\n    line_widths: Transform | Buffer | float,\n)\n</code></pre> <p>Markers are arbitrary shapes with a given type, size and orientation that posses a surface that can be filled and stroked.</p> IN/OUT variables  <pre><code>// Rendering stage 1\nin uniform vec4 viewport;                    // in(\"viewport\")\nin attribute [ vec2 | vec3 ] positions;      // in(\"positions\")\nin [ attribute | uniform ] int types;        // in(\"types\")\nin [ attribute | uniform ] float sizes;      // in(\"sizes\")\nin [ attribute | uniform ] vec3 axis;        // in(\"axis\")\nin [ attribute | uniform ] vec3 angles;      // in(\"angles\")\nin [ attribute | uniform ] vec4 fill_colors; // in(\"fill_colors\")\nin [ attribute | uniform ] vec4 line_colors; // in(\"line_colors\")\nin [ attribute | uniform ] vec4 line_widths; // in(\"line_widths\")\n\n// Rendering stage 2\nout attribute vec3 screen;              // out(\"screen[positions]\")\n\n// Rendering stage 3\nout attribute int types;               // out(\"types\")\nout attribute float sizes;             // out(\"sizes\")\nout attribute vec3 axis;               // out(\"axis\")\nout attribute vec3 angles;             // out(\"angles\")\nout attribute vec4 fill_colors;        // out(\"fill_colors\")\nout attribute vec4 line_colors;        // out(\"line_colors\")\nout attribute float line_widths;       // out(\"line_widths\")\n</code></pre> Example PYTHONTEXTJSON <pre><code>positions = core.Buffer(3, np.dtype(np.float32))\nsizes =  core.Buffer(3, np.dtype(np.float32))\nmarkers = visual.Markers(positions,\n                         types=core.Marker.star,\n                         sizes=sizes,\n                         axis=None,\n                         angles=0.0,\n                         fill_colors=(0,0,0,1),\n                         line_colors=(0,0,0,0),\n                         line_widths=0.0)\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Buffer\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2025-03-18T15:02:33.806392 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - COUNT: 3 (int)\n     - DTYPE: float32 (dtype)\n     - DATA: None (memoryview | bytes)\n\n2. COMMAND\n     - METHOD: \"core.Buffer\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2025-03-18T15:02:33.806478 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - COUNT: 3 (int)\n     - DTYPE: float32 (dtype)\n     - DATA: None (memoryview | bytes)\n\n3. COMMAND\n     - METHOD: \"visual.Markers\" (str)\n     - COMMAND_ID: 3 (int)\n     - TIMESTAMP: 2025-03-18T15:02:33.806585 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 3 (int)\n     - POSITIONS_ID: 1 (Transform | Buffer)\n     - TYPES: 7 (Transform | Buffer | Marker)\n     - SIZES_ID: 2 (Transform | Buffer | float)\n     - AXIS: None (Transform | Buffer | Vec3)\n     - ANGLES: 0.0 (Transform | Buffer | float)\n     - FILL_COLORS: Color(r=0, g=0, b=0, a=1) (converted) (Transform | Buffer | Color)\n     - LINE_COLORS: Color(r=0, g=0, b=0, a=0) (converted) (Transform | Buffer | Color)\n     - LINE_WIDTHS: 0.0 (Transform | Buffer | float)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Buffer\",\n      \"id\": 1,\n      \"timestamp\": 1742306553.806392,\n      \"parameters\": {\n        \"id\": 1,\n        \"count\": 3,\n        \"dtype\": \"float32\",\n        \"data\": null\n      }\n    },\n    {\n      \"method\": \"core.Buffer\",\n      \"id\": 2,\n      \"timestamp\": 1742306553.806478,\n      \"parameters\": {\n        \"id\": 2,\n        \"count\": 3,\n        \"dtype\": \"float32\",\n        \"data\": null\n      }\n    },\n    {\n      \"method\": \"visual.Markers\",\n      \"id\": 3,\n      \"timestamp\": 1742306553.806585,\n      \"parameters\": {\n        \"id\": 3,\n        \"positions(id)\": 1,\n        \"types\": 7,\n        \"sizes(id)\": 2,\n        \"axis\": null,\n        \"angles\": 0.0,\n        \"fill_colors\": [\n          0,\n          0,\n          0,\n          1\n        ],\n        \"line_colors\": [\n          0,\n          0,\n          0,\n          0\n        ],\n        \"line_widths\": 0.0\n      }\n    }\n  ]\n}\n</code></pre> <p>Create a visual of n points at given positions with given sizes, flll_colors., line_colors and line_widths.</p> <p>Parameters:</p> Name Type Description Default <code>positions</code> <code>Transform | Buffer</code> <p>Points position (vec3)</p> required <code>types</code> <code>Transform | Buffer | Marker</code> <p>Marker types (Marker)</p> required <code>sizes</code> <code>Transform | Buffer | Measure</code> <p>Point sizes (float)</p> required <code>axis</code> <code>Transform | Buffer | Vec3</code> <p>Marker axis (vec3)</p> required <code>angles</code> <code>Transform | Buffer | float</code> <p>Marker rotation angle around axis (float)</p> required <code>fill_colors</code> <code>Transform | Buffer | Color</code> <p>Points fill colors (vec4)</p> required <code>line_colors</code> <code>Transform | Buffer | Color</code> <p>Points line colors (vec4)</p> required <code>line_widths</code> <code>Transform | Buffer | Measure</code> <p>Points line colors (vec4)</p> required"},{"location":"api/visual/markers.html#gsp.visual.Markers.render","title":"render","text":"<pre><code>render(\n    viewport: Viewport,\n    model: Matrix = None,\n    view: Matrix = None,\n    proj: Matrix = None,\n)\n</code></pre> <p>Render the visual on viewport using the given model, view, proj matrices</p> <p>Parameters:</p> Name Type Description Default <code>viewport</code> <code>Viewport</code> <p>Viewport where to render the visual</p> required <code>model</code> <code>Matrix</code> <p>Model matrix to use for rendering</p> <code>None</code> <code>view</code> <code>Matrix</code> <p>View matrix to use for rendering</p> <code>None</code> <code>proj</code> <code>Matrix</code> <p>Projection matrix to use for rendering</p> <code>None</code>"},{"location":"api/visual/paths.html","title":"Paths","text":""},{"location":"api/visual/paths.html#gsp.visual.Paths","title":"Paths","text":"<pre><code>Paths(\n    positions: Transform | Buffer,\n    indices: Transform | Buffer | list | int,\n    line_colors: Transform | Buffer | Color,\n    line_widths: Transform | Buffer | float,\n    line_styles: Transform | Buffer | LineStyle,\n    line_joins: Transform | Buffer | LineJoin,\n    line_caps: Transform | Buffer | LineCap,\n)\n</code></pre> <p>Paths is a set of contiguous lines passing through a series of positions (path). Each path can be colored and styled and possess a thickness. Paths always face the viewer such that their apparent thickness is constant. Their end points (caps) can be styled following the SVG specification (butt, round or cap). Their joins can be styled following partially the SVG specification (round, miter or bevel). The number of paths inside a Paths visual is dictated by the indices variables (see below).</p>"},{"location":"api/visual/paths.html#gsp.visual.Paths--elements","title":"Elements","text":"<p>The number of elements (paths) composing a visual is fully specified by the <code>indices</code> and <code>positions</code> parameters. Considering a positions paramters with n position, <code>indices</code> can be: </p> <ul> <li><code>int</code> (equal to p)</li> </ul> This indicates paths are composed of p consecutives   positions.  this require p to be a divider of n. The   total number of paths N is equal to n/p. <ul> <li><code>Buffer</code> or <code>list</code> of N integers</li> </ul> Each item of the list describes a path made of the given number of consecutive positions. This require the sum of the list to be less or equal to n. The total number of paths is the length of the list N. <ul> <li><code>`list of list</code> or <code>Buffer</code> (of integers)</li> </ul> Each item of the list describe a path made of indexed positions. The total number of paths is the length of the list N. When a buffer is used in place of a list, each item must be separated by the value -1 indicating the end of a path. <p>Example <pre><code>Paths([a,b,c,d], 2)                # results in two paths: (a,b) and (c,d)\nPaths([a,b,c,d], [2,2])            # results in two paths: (a,b) and (c,d)\nPaths([a,b,c,d], [[0,1], [2,3]])   # results in two paths: (a,b) and (c,d)\nPaths([a,b,c,d], [0,1,-1, 2,3,-1]) # results in two paths: (a,b) and (c,d)\n</code></pre></p>"},{"location":"api/visual/paths.html#gsp.visual.Paths--attributes","title":"Attributes","text":"<p>Each attribute of the visual can be assigned per visual (all paths), per path, per position or per vertex, depending on the nature of the attribute and the possible limitations of the server. Let's consider a set of n positions that results in P paths producing N vertices.</p> Attribute Type per visual (1) per path (P) per positions (n) per vertex (N) line_colors vec4 \u2713 \u2713\ufe0e\ufe0e \u2713 \u2713 line_widths float \u2713 \u2713\ufe0e\ufe0e \u2713 \u2713 line_styles int \u2713 \u2713 - - line_joins int \u2713 \u2713\ufe0e\ufe0e - - line_caps ivec2 \u2713 \u2713 - -"},{"location":"api/visual/paths.html#gsp.visual.Paths--output-variables","title":"Output variables","text":"<p>During rendering, a number of variables are produced and can be referred to in the definition of attributes using the Out transform using their name. The  size of these variables are dependents on their nature. Let's  consider a set of n positions that results in P paths producing N vertices.</p> Variable name (string) Type Size Comment positions/2D vec2 n Positions coordinates (screen) vertex/positions/2D vec2 N Path vertex coordinates (screen) vertex/positions/3D vec3 N Path vertex coordinates (space) vertex/curvilinear/2D float N Curvilinear coordinates along path (2d space) vertex/curvilinear/3D float N Curvilinear coordinates along path (3d space) <p>After rendering, once every transforms has been evaluated, a number of variables are readable by other visuals:</p> Variable name (string) Type Size Comment vertex/colors vec4 N Line color vertex/widths float N Line width path/caps ivec2 P Line caps path/joins int P Line joins path/style int P Line style <pre><code>python docs/snippets/Paths_init.py\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>positions</code> <code>Transform | Buffer</code> <p>Paths positions (vec3)</p> required <code>indices</code> <code>Transform | List | int</code> <p>Position indices composing paths (int)</p> required <code>line_caps</code> <code>Transform | Buffer | LineCap</code> <p>Paths end caps (int)</p> required <code>line_colors</code> <code>Transform | Buffer | Color</code> <p>Paths line colors (vec4)</p> required <code>line_widths</code> <code>Transform | Buffer | Measure</code> <p>Paths line width (float)</p> required"},{"location":"api/visual/paths.html#gsp.visual.Paths.render","title":"render","text":"<pre><code>render(\n    viewport: Viewport,\n    model: Matrix = None,\n    view: Matrix = None,\n    proj: Matrix = None,\n)\n</code></pre> <p>Render the visual on viewport using the given model, view, proj matrices</p> <p>Parameters:</p> Name Type Description Default <code>viewport</code> <code>Viewport</code> <p>Viewport where to render the visual</p> required <code>model</code> <code>Matrix</code> <p>Model matrix to use for rendering</p> <code>None</code> <code>view</code> <code>Matrix</code> <p>View matrix to use for rendering</p> <code>None</code> <code>proj</code> <code>Matrix</code> <p>Projection matrix to use for rendering</p> <code>None</code>"},{"location":"api/visual/pixels.html","title":"Pixels","text":""},{"location":"api/visual/pixels.html#gsp.visual.Pixels","title":"Pixels","text":"<pre><code>Pixels(\n    positions: Transform | Buffer,\n    colors: Transform | Buffer | Color,\n)\n</code></pre> <p>Pixels are the smallest entities that can be rendered on screen (pixel or fragment) or on paper (dot). They can be colored but have no dimension and correspond to the true mathematical notion of a point.</p> IN/OUT variables  <pre><code>// Rendering stage 1\nin uniform vec4 viewport;               // in(\"viewport\")\nin attribute [ vec2 | vec3 ] positions; // in(\"positions\")\nin [ attribute | uniform ] vec4 colors; // in(\"colors\")\n\n// Rendering stage 2\nout attribute vec3 screen;              // out(\"screen[positions]\")\n\n// Rendering stage 3\nout attribute vec4 colors;              // out(\"colors\")\n</code></pre> Example PYTHONTEXTJSON <pre><code>positions = core.Buffer(3, np.dtype(np.float32))\npixels = visual.Pixels(positions, colors=(0,0,0,1))\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Buffer\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2025-03-18T15:02:33.907696 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - COUNT: 3 (int)\n     - DTYPE: float32 (dtype)\n     - DATA: None (memoryview | bytes)\n\n2. COMMAND\n     - METHOD: \"visual.Pixels\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2025-03-18T15:02:33.907787 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - POSITIONS_ID: 1 (Transform | Buffer)\n     - COLORS: Color(r=0, g=0, b=0, a=1) (converted) (Transform | Buffer | Color)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Buffer\",\n      \"id\": 1,\n      \"timestamp\": 1742306553.907696,\n      \"parameters\": {\n        \"id\": 1,\n        \"count\": 3,\n        \"dtype\": \"float32\",\n        \"data\": null\n      }\n    },\n    {\n      \"method\": \"visual.Pixels\",\n      \"id\": 2,\n      \"timestamp\": 1742306553.907787,\n      \"parameters\": {\n        \"id\": 2,\n        \"positions(id)\": 1,\n        \"colors\": [\n          0,\n          0,\n          0,\n          1\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <p>Create a Pixels visual at given positions and given colors. If positions is a transform, it is first evaluated and produce the \"screen\" and \"depth\" buffers. If the type of positions is vec2, the z coordinate of all pixels is set to the default z coordinate (0). If colors is a transform, it is first evaluated and produce the \"colors\" buffer.</p> <p>Parameters:</p> Name Type Description Default <code>positions</code> <code>Transform | Buffer</code> <p>Pixel positions (vec3 or vec2)</p> required <code>colors</code> <code>Transform | Buffer | Color</code> <p>Pixel colors (vec4)</p> required"},{"location":"api/visual/pixels.html#gsp.visual.Pixels.render","title":"render","text":"<pre><code>render(\n    viewport: Viewport,\n    model: Matrix = None,\n    view: Matrix = None,\n    proj: Matrix = None,\n)\n</code></pre> <p>Render the visual on viewport using the given model, view, proj matrices</p> <p>Parameters:</p> Name Type Description Default <code>viewport</code> <code>Viewport</code> <p>Viewport where to render the visual</p> required <code>model</code> <code>Matrix</code> <p>Model matrix to use for rendering</p> <code>None</code> <code>view</code> <code>Matrix</code> <p>View matrix to use for rendering</p> <code>None</code> <code>proj</code> <code>Matrix</code> <p>Projection matrix to use for rendering</p> <code>None</code>"},{"location":"api/visual/points.html","title":"Points","text":""},{"location":"api/visual/points.html#gsp.visual.Points","title":"Points","text":"<pre><code>Points(\n    positions: Transform | Buffer,\n    sizes: Transform | Buffer | float,\n    fill_colors: Transform | Buffer | Color,\n    line_colors: Transform | Buffer | Color,\n    line_widths: Transform | Buffer | float,\n)\n</code></pre> <p>Points are discs with a given size (diameter) and posses a surface that can be filled and stroked. They always face the viewer such that their rendered shape is a disc, independentely of any transform.</p> IN/OUT variables  <pre><code>// Rendering stage 1\nin uniform vec4 viewport;                    // in(\"viewport\")\nin attribute [ vec2 | vec3 ] positions;      // in(\"positions\")\nin [ attribute | uniform ] float sizes;      // in(\"sizes\")\nin [ attribute | uniform ] vec4 fill_colors; // in(\"fill_colors\")\nin [ attribute | uniform ] vec4 line_colors; // in(\"line_colors\")\nin [ attribute | uniform ] vec4 line_widths; // in(\"line_widths\")\n\n// Rendering stage 2\nout attribute vec3 screen;              // out(\"screen[positions]\")\n\n// Rendering stage 3\nout attribute float sizes;             // out(\"sizes\")\nout attribute vec4  fill_colors;       // out(\"fill_colors\")\nout attribute vec4  line_colors;       // out(\"line_colors\")\nout attribute float line_widths;       // out(\"line_widths\")\n</code></pre> Example PYTHONTEXTJSON <pre><code>positions = core.Buffer(3, np.dtype(np.float32))\npoints = visual.Points(positions,\n                       sizes=5.0,\n                       fill_colors=(0,0,0,1),\n                       line_colors=(0,0,0,0),\n                       line_widths=0.0)\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Buffer\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2025-03-18T15:02:33.991912 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - COUNT: 3 (int)\n     - DTYPE: float32 (dtype)\n     - DATA: None (memoryview | bytes)\n\n2. COMMAND\n     - METHOD: \"visual.Points\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2025-03-18T15:02:33.992013 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - POSITIONS_ID: 1 (Transform | Buffer)\n     - SIZES: 5.0 (Transform | Buffer | float)\n     - FILL_COLORS: Color(r=0, g=0, b=0, a=1) (converted) (Transform | Buffer | Color)\n     - LINE_COLORS: Color(r=0, g=0, b=0, a=0) (converted) (Transform | Buffer | Color)\n     - LINE_WIDTHS: 0.0 (Transform | Buffer | float)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Buffer\",\n      \"id\": 1,\n      \"timestamp\": 1742306553.991912,\n      \"parameters\": {\n        \"id\": 1,\n        \"count\": 3,\n        \"dtype\": \"float32\",\n        \"data\": null\n      }\n    },\n    {\n      \"method\": \"visual.Points\",\n      \"id\": 2,\n      \"timestamp\": 1742306553.992013,\n      \"parameters\": {\n        \"id\": 2,\n        \"positions(id)\": 1,\n        \"sizes\": 5.0,\n        \"fill_colors\": [\n          0,\n          0,\n          0,\n          1\n        ],\n        \"line_colors\": [\n          0,\n          0,\n          0,\n          0\n        ],\n        \"line_widths\": 0.0\n      }\n    }\n  ]\n}\n</code></pre> <p>Create a visual of n points at given positions with given sizes, flll_colors., line_colors and line_widths.</p> <p>Parameters:</p> Name Type Description Default <code>positions</code> <code>Transform | Buffer</code> <p>Points position (vec3)</p> required <code>sizes</code> <code>Transform | Buffer | Measure</code> <p>Point sizes (float)</p> required <code>fill_colors</code> <code>Transform | Buffer | Color</code> <p>Points fill colors (vec4)</p> required <code>line_colors</code> <code>Transform | Buffer | Color</code> <p>Points line colors (vec4)</p> required <code>line_widths</code> <code>Transform | Buffer | Measure</code> <p>Points line colors (vec4)</p> required"},{"location":"api/visual/points.html#gsp.visual.Points.render","title":"render","text":"<pre><code>render(\n    viewport: Viewport,\n    model: Matrix = None,\n    view: Matrix = None,\n    proj: Matrix = None,\n)\n</code></pre> <p>Render the visual on viewport using the given model, view, proj matrices</p> <p>Parameters:</p> Name Type Description Default <code>viewport</code> <code>Viewport</code> <p>Viewport where to render the visual</p> required <code>model</code> <code>Matrix</code> <p>Model matrix to use for rendering</p> <code>None</code> <code>view</code> <code>Matrix</code> <p>View matrix to use for rendering</p> <code>None</code> <code>proj</code> <code>Matrix</code> <p>Projection matrix to use for rendering</p> <code>None</code>"},{"location":"api/visual/segments.html","title":"Segments","text":""},{"location":"api/visual/segments.html#gsp.visual.Segments","title":"Segments","text":"<pre><code>Segments(\n    positions: Transform | Buffer,\n    line_caps: Transform | Buffer | LineCap,\n    line_colors: Transform | Buffer | Color,\n    line_widths: Transform | Buffer | float,\n)\n</code></pre> <p>Segments are line segments between two vertices. They can be colored and styled (dash pattern). They possess a thickness but always face the viewer such that their apparent thickness is constant. Their end points (caps) can be styled following the SVG specification (butt, round or cap).</p> IN/OUT variables  <pre><code>// Rendering stage 1\nin uniform vec4 viewport;                     // in(\"viewport\")\nin attribute [ vec2 | vec3 ] positions;       // in(\"positions\")\nin [ attribute | uniform ] int line_caps;     // in(\"fill_colors\")\nin [ attribute | uniform ] vec4 line_colors;  // in(\"line_colors\")\nin [ attribute | uniform ] float line_widths; // in(\"line_widths\")\n\n// Rendering stage 2\nout attribute vec3 screen;                    // out(\"screen[positions]\")\nout attribute vec3 segments;                  // out(\"screen[segments]\")\n\n// Rendering stage 3\nout attribute int line_caps;                  // out(\"line_caps\")\nout attribute vec4 line_colors;               // out(\"line_colors\")\nout attribute float line_widths;              // out(\"line_widths\")\n</code></pre> Example PYTHONTEXTJSON <pre><code>positions = core.Buffer(2*3, np.dtype(np.float32))\nmarkers = visual.Segments(positions,\n                          line_caps=core.LineCap.round,\n                          line_colors=(0,0,0,0),\n                          line_widths=0.0)\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Buffer\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2025-03-18T15:02:34.095178 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - COUNT: 6 (int)\n     - DTYPE: float32 (dtype)\n     - DATA: None (memoryview | bytes)\n\n2. COMMAND\n     - METHOD: \"visual.Segments\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2025-03-18T15:02:34.095279 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - POSITIONS_ID: 1 (Transform | Buffer)\n     - LINE_CAPS: 2 (Transform | Buffer | LineCap)\n     - LINE_COLORS: Color(r=0, g=0, b=0, a=0) (converted) (Transform | Buffer | Color)\n     - LINE_WIDTHS: 0.0 (Transform | Buffer | float)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Buffer\",\n      \"id\": 1,\n      \"timestamp\": 1742306554.095178,\n      \"parameters\": {\n        \"id\": 1,\n        \"count\": 6,\n        \"dtype\": \"float32\",\n        \"data\": null\n      }\n    },\n    {\n      \"method\": \"visual.Segments\",\n      \"id\": 2,\n      \"timestamp\": 1742306554.095279,\n      \"parameters\": {\n        \"id\": 2,\n        \"positions(id)\": 1,\n        \"line_caps\": 2,\n        \"line_colors\": [\n          0,\n          0,\n          0,\n          0\n        ],\n        \"line_widths\": 0.0\n      }\n    }\n  ]\n}\n</code></pre> <p>Create a visual of n segments at given positions with given line_colors, line_widths and line_caps.</p> <p>Parameters:</p> Name Type Description Default <code>positions</code> <code>Transform | Buffer</code> <p>Segments positions (2,vec3)</p> required <code>line_caps</code> <code>Transform | Buffer | LineCap</code> <p>Segments end caps (int)</p> required <code>line_colors</code> <code>Transform | Buffer | Color</code> <p>Segments line colors (vec4)</p> required <code>line_widths</code> <code>Transform | Buffer | Measure</code> <p>Segments line width (float)</p> required"},{"location":"api/visual/segments.html#gsp.visual.Segments.render","title":"render","text":"<pre><code>render(\n    viewport: Viewport,\n    model: Matrix = None,\n    view: Matrix = None,\n    proj: Matrix = None,\n)\n</code></pre> <p>Render the visual on viewport using the given model, view, proj matrices</p> <p>Parameters:</p> Name Type Description Default <code>viewport</code> <code>Viewport</code> <p>Viewport where to render the visual</p> required <code>model</code> <code>Matrix</code> <p>Model matrix to use for rendering</p> <code>None</code> <code>view</code> <code>Matrix</code> <p>View matrix to use for rendering</p> <code>None</code> <code>proj</code> <code>Matrix</code> <p>Projection matrix to use for rendering</p> <code>None</code>"},{"location":"gallery/canvas-viewport.html","title":"Canvas and viewport","text":""},{"location":"gallery/canvas-viewport.html#canvas","title":"Canvas","text":""},{"location":"gallery/canvas-viewport.html#canvas-base","title":"Canvas (base)","text":"<p>This example shows how to create a canvas with a size specified using some units (centimeter) and how t enter the event loop (matplotlib).</p> <p> Keyword: pixels, matplotlib, orthographic  Code: canvas-base.py</p>"},{"location":"gallery/pixels-points-markers.html","title":"Pixels, Points and Markers","text":""},{"location":"gallery/pixels-points-markers.html#pixels","title":"Pixels","text":""},{"location":"gallery/pixels-points-markers.html#pixels-2d","title":"Pixels (2D)","text":"<p>This example shows the Pixels visual where pixels are spread randomly inside a square that can be zoomed using the mouse and an orthographic camera.</p> <p> Keyword: pixels, matplotlib, orthographic  Code: pixels-2d.py</p> <p></p>"},{"location":"gallery/pixels-points-markers.html#pixels-3d","title":"Pixels (3D)","text":"<p>This example show the Pixels visual where pixels are spread randomly inside a cube that can be rotated and zoomed using the mouse and a perspective camera</p> <p> Keyword: pixels, matplotlib, perspective  Code: pixels-3d.py</p> <p></p>"},{"location":"gallery/pixels-points-markers.html#pixels-colors","title":"Pixels (colors)","text":"<p>This example show the Pixels visual where pixels are spread randomly inside a cube and colored according to their position.</p> <p> Keyword: pixels, colors  Code: pixels-colors.py</p> <p></p>"},{"location":"gallery/pixels-points-markers.html#pixels-colormap","title":"Pixels (colormap)","text":"<p>This example shows the Pixels visual where pixels are colored according to screen coordinates (x,y) or depth (z) using a colormap.</p> <p> Keyword: pixels, colormap, transform, screen  Code: pixels-colormap.py</p>"},{"location":"gallery/pixels-points-markers.html#points","title":"Points","text":""},{"location":"gallery/pixels-points-markers.html#points-2d","title":"Points (2D)","text":"<p>This example shows the Points visual with different sizes can be zoomed using the mouse and an orthographic camera.</p> <p> Keyword: points, matplotlib, orthographic  Code: points-3d.py</p> <p></p>"},{"location":"gallery/pixels-points-markers.html#points-3d","title":"Points (3D)","text":"<p>This example shows the Points visual with different sizes can be roated and zoomed using the mouse and a perspective camera. Points size and linewidth are updated according to zoom level.</p> <p> Keyword: points, matplotlib, perspective, zoom  Code: points-3d.py</p> <p></p>"},{"location":"gallery/pixels-points-markers.html#points-colormap","title":"Points (Colormap)","text":"<p>This example shows the Points visual where point colors are set according to their depth (screen coordinate) and a colormap (magma). This results in dynamic colors where most front points are alwyas painted with the same color.</p> <p> Keyword: points, matplotlib, transform, colormap  Code: points-colormap.py</p>"},{"location":"gallery/pixels-points-markers.html#markers","title":"Markers","text":""},{"location":"gallery/pixels-points-markers.html#markers-2d","title":"Markers (2D)","text":"<p>This example shows the Markers visual with different sizes and angles and can be zoomed using the mouse and an orthographic camera.</p> <p> Keyword: markers, matplotlib, orthographic  Code: markers-2d.py</p> <p></p>"},{"location":"gallery/pixels-points-markers.html#markers-3d","title":"Markers (3D)","text":"<p>This example shows the Markers visual with different sizes and angles and can be zoomed using the mouse and a perspecive camera.</p> <p> Keyword: markers, matplotlib, orthographic  Code: markers-3d.py</p>"},{"location":"python/command.html","title":"Code instrumentation","text":"<p>The Python implementation of the protocol relies on the automatic code instrumentation that is implemented through the command function decorator. This decorator registers all necessary information when a method is called and offers convenient conversion functions. This works by inspecting the declared type of a method (using function annotations) and checking of the provided type has the right type. If this is not the case, the command search for a converter among those registered.</p> Code instrumentationOutput <pre><code>import gsp\n\n@gsp.io.register(\"float\", \"int\")\ndef float_to_int(value): return int(value)\n\nclass Foo(gsp.Object):\n    @gsp.io.command(\"CREATE\")\n    def __init__(self, value : int):\n        gsp.Object.__init__(self)\n        self.value = value\n\nfoos = Foo(1), Foo(2)\nprint(gsp.io.queue(\"active\"))\n</code></pre> <pre><code>CommandQueue(\"default\", active, read-write) : 2 command(s)\n  - Command #1: Foo(id=1)/CREATE(\u2026)\n  - Command #2: Foo(id=2)/CREATE(\u2026)\n</code></pre>"},{"location":"python/command.html#command-related-functions","title":"Command related functions","text":""},{"location":"python/command.html#gsp.io.command.queue","title":"queue","text":"<pre><code>queue(name='default')\n</code></pre> <p>Return a new or existing command queue. There is a special name \"active\" that relates to the current command queue. Each time a queue is created, it becomes automatically the active one.</p>"},{"location":"python/command.html#gsp.io.command.record","title":"record","text":"<pre><code>record(state: bool = False)\n</code></pre> <p>Activate (state=True) or deactivate (state=False) global command recording (for all command queues).</p>"},{"location":"python/command.html#gsp.io.command.command","title":"command","text":"<pre><code>command(name=None)\n</code></pre> <p>Function decorator that creates a command when the function is called and optionally record it. The name of the method can can be overriden with the provided name.</p>"},{"location":"python/command.html#conversion-related-functions","title":"Conversion related functions","text":""},{"location":"python/command.html#gsp.io.convert.register","title":"register","text":"<pre><code>register(src_types: str | tuple[str, ...], dst_type: str)\n</code></pre> <p>Function decorator that registers a converter from <code>src_types</code> to <code>dst_type</code></p>"},{"location":"python/command.html#gsp.io.convert.unregister","title":"unregister","text":"<pre><code>unregister(src_types: str | tuple[str, ...], dst_type: str)\n</code></pre> <p>Unregister converters from <code>src_types</code> to <code>dst_type</code>.</p>"},{"location":"python/command.html#gsp.io.convert.convert","title":"convert","text":"<pre><code>convert(value: object, dst_type: str)\n</code></pre> <p>Return a converter from <code>value</code> type to <code>dst_type</code>, if there exists such a converter.</p>"},{"location":"python/glm.html","title":"OpenGL mathematics","text":"<p>This is a test</p>"},{"location":"python/memory.html","title":"Memory management","text":"<p>This is a test</p>"}]}