{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>The Graphic Server Protocol (GSP) is meant to be an API between hardware and software, targeted at developpers who do not want to dive into the arcane of OpenGL, Metal or Vulkan but still want to benefit from GPU speed, versatily and quality.</p> <p>The overall goal of GSP is not to provide a general graphics API but rather to address only scientific visualization, which requires a far fewer number of objects and concepts, with specific requirements on rendering quality though. The API is voluntarily small and targets the smallest set of visuals that allow to render the vast majority of scientific plots (2d or 3d).</p>"},{"location":"api/protocol.html","title":"Protocol","text":""},{"location":"api/protocol.html#header-part","title":"Header Part","text":"<pre><code>/**\n * Defines an integer number in the range of -2^31 to 2^31 - 1.\n */\nexport type integer = number;\n</code></pre>"},{"location":"api/protocol.html#content-part","title":"Content Part","text":""},{"location":"api/protocol.html#base-types","title":"Base Types","text":""},{"location":"api/protocol.html#request-message","title":"Request Message","text":""},{"location":"api/protocol.html#response-message","title":"Response Message","text":""},{"location":"api/protocol.html#notification-message","title":"Notification Message","text":""},{"location":"api/core/canvas.html","title":"Canvas","text":""},{"location":"api/core/canvas.html#gsp.core.canvas.Canvas","title":"Canvas","text":"<pre><code>Canvas(\n    width: int = 512, height: int = 512, dpi: float = 100.0\n)\n</code></pre> <p>A Canvas is a two-dimensional drawing area of size width \u00d7 height pixels using the specified dpi (dots per inch).</p> Info <ul> <li>A canvas uses a standard color space with at least 8 bits per channel.</li> <li>Blending mode is alpha blending</li> <li>The <code>(0,0)</code> coordinates corresponds to the bottom left corner.</li> <li>A typographical point is 1/72 inch.</li> </ul> Example PYTHONTEXTYAMLJSON <pre><code>from gsp.core.canvas import Canvas\ncanvas = Canvas(512, 512, 100.0)\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-07-30T09:20:52.409965 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 100.0 (float)\n\n</code></pre> <pre><code>- method: core.Canvas\n  cid: 1\n  timestamp: 1722324052.409965\n  parameters: {id: 1, width: 512, height: 512, dpi: 100.0}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1722324052.409965,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 100.0\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of the drawing area in pixels.</p> <code>512</code> <code>height</code> <code>int</code> <p>Height of the drawing area in pixels.</p> <code>512</code> <code>dpi</code> <code>float</code> <p>Dots per inch</p> <code>100.0</code>"},{"location":"api/core/canvas.html#gsp.core.canvas.Canvas.render","title":"render","text":"<pre><code>render(target: str = None)\n</code></pre> <p>Render the canvas the to specified target. If no target is specified, return a raw image as bytes.</p> Example PYTHONTEXTYAMLJSON <pre><code>from gsp.core.canvas import Canvas\ncanvas = Canvas(512, 512, 100.0)\ncanvas.render(\"png\")\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-07-30T09:20:52.454508 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 100.0 (float)\n\n2. COMMAND\n     - METHOD: \"Canvas/render\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-07-30T09:20:52.454531 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - TARGET: png (str)\n\n</code></pre> <pre><code>- method: core.Canvas\n  cid: 1\n  timestamp: 1722324052.454508\n  parameters: {id: 1, width: 512, height: 512, dpi: 100.0}\n- method: Canvas/render\n  cid: 2\n  timestamp: 1722324052.454531\n  parameters: {id: 1, target: png}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1722324052.454508,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 100.0\n      }\n    },\n    {\n      \"method\": \"Canvas/render\",\n      \"id\": 2,\n      \"timestamp\": 1722324052.454531,\n      \"parameters\": {\n        \"id\": 1,\n        \"target\": \"png\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>Filename of the target</p> <code>None</code>"},{"location":"api/io/command.html","title":"Command","text":""},{"location":"api/io/command.html#gsp.io.command.CommandQueue","title":"CommandQueue","text":"<pre><code>CommandQueue(default=True, readonly=False)\n</code></pre> <p>A command queue allows to store a list of Command that can be ran later.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>bool</code> <p>Make this queue the default one.</p> <code>True</code> Source code in <code>gsp/io/command.py</code> <pre><code>def __init__(self, default=True, readonly=False):\n    \"\"\"\n    Create a new empty command queue.\n\n    Parameters\n    ----------\n\n    default : bool\n\n        Make this queue the default one.\n    \"\"\"\n\n    self._commands = []\n    self.readonly = readonly\n    if default:\n        CommandQueue._default = self\n</code></pre>"},{"location":"api/io/command.html#gsp.io.command.Command","title":"Command","text":"<pre><code>Command(classname, methodname, parameters, annotations)\n</code></pre> <p>Generic command with a unique id.</p> <p>Parameters:</p> Name Type Description Default <code>classname</code> <code>string</code> <p>Name of the class</p> required <code>methodname</code> <code>string</code> <p>Name of the method</p> required <code>parameters</code> <code>dict</code> <p>Dictionnary of parameters</p> required <code>annotations</code> <code>dict</code> <p>Annoated type of the called method</p> required <p>Examples:</p> <pre><code>class Foo(Object):\n    def __init__(self, value : int):\n        self.value = value\n\ncommand = Command(\"Foo\", \"__init__\", {\"value\" : 1})\nfoo = command.execute()\n</code></pre> Source code in <code>gsp/io/command.py</code> <pre><code>def __init__(self,  classname,  methodname, parameters, annotations):\n    \"\"\" Build a new command with a unique command id (cid)\n\n    Parameters\n    ----------\n\n    classname : string\n        Name of the class\n\n    methodname : string\n        Name of the method\n\n    parameters : dict\n        Dictionnary of parameters\n\n    annotations : dict\n\n        Annoated type of the called method\n\n    Examples\n    --------\n\n    ```python\n    class Foo(Object):\n        def __init__(self, value : int):\n            self.value = value\n\n    command = Command(\"Foo\", \"__init__\", {\"value\" : 1})\n    foo = command.execute()\n    ```\n    \"\"\"\n\n    self.id = CID()\n    self.timestamp = datetime.timestamp(datetime.now())\n    if \"id\" not in parameters.keys():\n        raise ValueError(\"Parameters needs to have an id\")\n    self.classname = classname\n    self.methodname = methodname\n    self.parameters = parameters\n    for key, value in parameters.items():\n        if isinstance(value, Object):\n            self.parameters[key] = value.id\n    self.annotations = annotations\n</code></pre>"},{"location":"api/io/command.html#gsp.io.command.command","title":"command","text":"<pre><code>command(name=None)\n</code></pre> <p>Function decorator that create a command when the function is called and optionally record it and/or write it to stdout. The name of the method it decorates can be overriden with the method argument.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>string</code> <p>Alternative name of the command. If not provided, the actual name is used</p> <code>None</code> Source code in <code>gsp/io/command.py</code> <pre><code>def command(name=None):\n    \"\"\"\n    Function decorator that create a command when the function is called and\n    optionally record it and/or write it to stdout. The name of the method it\n    decorates can be overriden with the method argument.\n\n    Parameters\n    ----------\n\n    name : string\n\n        Alternative name of the command. If not provided, the actual\n        name is used\n    \"\"\"\n\n    def wrapper(func):\n\n        @wraps(func)\n        def inner(self, *args, **kwargs):\n\n            no_command = False\n            if \"__no_command__\" in kwargs:\n                no_command = True\n                del kwargs[\"__no_command__\"]\n\n            keys = func.__code__.co_varnames[1:]\n            annotations = func.__annotations__\n            annotations = typing.get_type_hints(func)\n\n            values = args\n            defaults = get_default_args(func)\n\n            func(self, *args, **kwargs)\n\n            # Add self (identifying by id) to parameters\n            parameters = {\"id\": self.id}\n\n            # Parameters\n            for key,value in zip(keys,values):\n                parameters[key] = value\n\n            # Named parameters\n            for key,value in zip(kwargs.keys(), kwargs.values()):\n                if key not in parameters.keys():\n                    parameters[key] = value\n\n            # Default parameters\n            for key,value in defaults.items():\n                if key not in parameters.keys():\n                    parameters[key] = value\n\n            # Get default command queue\n            queue = CommandQueue.get_default()\n\n            # Check if parameter is of the right type, else, search\n            # for a conversion method inside the parameter class.\n            for key,value in parameters.items():\n                if key in annotations.keys():\n\n                    check = False\n                    parameter_type = parameters[key].__class__\n                    if \"[\" in parameter_type.__name__:\n                        parameter_type = parameters[key].__class__.__base__\n\n                    if typing.get_origin(annotations[key]) is typing.Union:\n                        annotated_types = list(typing.get_args(annotations[key]))\n                    else:\n                        annotated_types = annotations[key],\n\n                    for annotated_type in annotated_types:\n                        # Parameter is an instance of one the annotated type\n                        if (annotated_type == parameter_type or\n                            isinstance(parameter_type,annotated_type) or\n                            issubclass(parameter_type,annotated_type)):\n                            check = True\n                            break\n\n                        # Found converter, register it\n                        converter = get_converter(parameter_type, annotated_type)\n                        if converter:\n                            check = True\n                            # if queue._immediate:\n                            # Immediate conversion\n                            # parameters[key] = converter(value)\n                            # else:\n                            # Delayed conversion\n                            parameters[key] = Converter(converter ,value)\n\n                    if check:\n                        continue\n                    else:\n                        raise ValueError(\n                            \"No converter found for converting %s to %s.\"\n                            % (parameter_type, annotated_types))\n\n            if not no_command and not queue.readonly:\n                classname = self.__class__.__name__\n                methodname = func.__code__.co_name if name is None else name\n                command = Command(classname, methodname, parameters, annotations)\n                queue.push(command)\n                log.info(\"%s\" % command)\n\n        return inner\n    return wrapper\n</code></pre>"}]}