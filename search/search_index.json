{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>The Graphic Server Protocol (GSP) is meant to be an API between hardware and software, targeted at developpers who do not want to dive into the arcane of OpenGL, Metal or Vulkan but still want to benefit from GPU speed, versatily and quality.</p> <p>The overall goal of GSP is not to provide a general graphics API but rather to address only scientific visualization, which requires a far fewer number of objects and concepts, with specific requirements on rendering quality though. The API is voluntarily small and targets the smallest set of visuals that allow to render the vast majority of scientific plots (2d or 3d).</p>"},{"location":"gallery-zero-dimension.html","title":"Zero dimension","text":""},{"location":"gallery-zero-dimension.html#pixels-2d","title":"Pixels (2D)","text":"<p>This example show the Pixels visual where pixels are spread randomly inside a square that can be zoomed using the mouse and an orthographic camera.</p> <p> Keyword: pixels, matplotlib, orthographic  Code: pixels-2d.py</p>"},{"location":"gallery-zero-dimension.html#pixels-3d","title":"Pixels (3D)","text":"<p>This example show the Pixels visual where pixels are spread randomly inside a cube that can be rotated and zoomed using the mouse and a perspective camera</p> <p> Keyword: pixels, matplotlib, perspective  Code: pixels-3d.py</p>"},{"location":"gallery-zero-dimension.html#pixels-colors","title":"Pixels (colors)","text":"<p>This example show the Pixels visual where pixels are spread randomly inside a cube and colored according to their position. It is rather slow because it uses the matplotlib backend.</p> <p> Keyword: pixels, matplotlib, colors, perspective  Code: pixels-colors.py</p>"},{"location":"gallery-zero.html","title":"Zero dimension","text":""},{"location":"gallery-zero.html#pixels-2d","title":"Pixels (2D)","text":"<p>This example shows the Pixels visual where pixels are spread randomly inside a square that can be zoomed using the mouse and an orthographic camera.</p> <p> Keyword: pixels, matplotlib, orthographic  Code: pixels-2d.py</p>"},{"location":"gallery-zero.html#pixels-3d","title":"Pixels (3D)","text":"<p>This example show the Pixels visual where pixels are spread randomly inside a cube that can be rotated and zoomed using the mouse and a perspective camera</p> <p> Keyword: pixels, matplotlib, perspective  Code: pixels-3d.py</p>"},{"location":"gallery-zero.html#pixels-colors","title":"Pixels (colors)","text":"<p>This example show the Pixels visual where pixels are spread randomly inside a cube and colored according to their position.</p> <p> Keyword: pixels, colors  Code: pixels-colors.py</p>"},{"location":"gallery-zero.html#pixels-colormap","title":"Pixels (colormap)","text":"<p>This example shows the Pixels visual where pixels are colored according to screen coordinates (x,y) or depth (z) using a colormap.</p> <p> Keyword: pixels, colormap, transform, screen  Code: pixels-colormap.py</p>"},{"location":"api/protocol.html","title":"Protocol","text":""},{"location":"api/protocol.html#header-part","title":"Header Part","text":"<pre><code>/**\n * Defines an integer number in the range of -2^31 to 2^31 - 1.\n */\nexport type integer = number;\n</code></pre>"},{"location":"api/protocol.html#content-part","title":"Content Part","text":""},{"location":"api/protocol.html#base-types","title":"Base Types","text":""},{"location":"api/protocol.html#request-message","title":"Request Message","text":""},{"location":"api/protocol.html#response-message","title":"Response Message","text":""},{"location":"api/protocol.html#notification-message","title":"Notification Message","text":""},{"location":"api/core/buffer.html","title":"Buffer","text":""},{"location":"api/core/buffer.html#gsp.core.buffer.Buffer","title":"Buffer","text":"<pre><code>Buffer(\n    count: int,\n    dtype: np.dtype,\n    data: memoryview | bytes = None,\n)\n</code></pre> <p>Buffer represents a structured view on some Data or Buffer. Buffer can be a partial or whole view on the underlying source.</p> <p>Create a new Buffer.</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>Number of item</p> required <code>dtype</code> <code>dtype</code> <p>Type of the item</p> required <code>data</code> <code>memoryview | bytes</code> <p>Content of of the buffer</p> <code>None</code>"},{"location":"api/core/buffer.html#gsp.core.buffer.Buffer.set_data","title":"set_data","text":"<pre><code>set_data(offset: int, data: memoryview)\n</code></pre> <p>Update buffer content at given offset with new data.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>Offset in bytes where to start update</p> required <code>data</code> <code>memoryview</code> <p>Content to update with.</p> required"},{"location":"api/core/canvas.html","title":"Canvas","text":""},{"location":"api/core/canvas.html#gsp.core.canvas.Canvas","title":"Canvas","text":"<pre><code>Canvas(width: int, height: int, dpi: float)\n</code></pre> <p>A Canvas is a two-dimensional drawing area of size width \u00d7 height pixels using the specified dpi (dots per inch).</p> Info <ul> <li>A canvas uses a standard color space with at least 8 bits per channel.</li> <li>Blending mode is alpha blending</li> <li>The <code>(0,0)</code> coordinates corresponds to the bottom left corner.</li> <li>A typographical point is 1/72 inch.</li> </ul> Example PYTHONTEXTJSON <pre><code>from gsp.core.canvas import Canvas\ncanvas = Canvas(512, 512, 101.0)\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-21T12:52:32.533071 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 101.0 (float)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1724237552.533071,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 101.0\n      }\n    }\n  ]\n}\n</code></pre> <p>Create a new Canvas</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of the drawing area in pixels.</p> required <code>height</code> <code>int</code> <p>Height of the drawing area in pixels.</p> required <code>dpi</code> <code>float</code> <p>Dots per inch</p> required"},{"location":"api/core/canvas.html#gsp.core.canvas.Canvas.render","title":"render","text":"<pre><code>render(target: str)\n</code></pre> <p>Render the canvas the to specified target. If no target is specified, return a raw image as bytes.</p> Example PYTHONTEXTJSON <pre><code>from gsp.core.canvas import Canvas\ncanvas = Canvas(512, 512, 100.0)\ncanvas.render(\"png\")\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-21T12:52:32.602260 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 100.0 (float)\n\n2. COMMAND\n     - METHOD: \"Canvas/render\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-08-21T12:52:32.602297 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - TARGET: png (str)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1724237552.60226,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 100.0\n      }\n    },\n    {\n      \"method\": \"Canvas/render\",\n      \"id\": 2,\n      \"timestamp\": 1724237552.602297,\n      \"parameters\": {\n        \"id\": 1,\n        \"target\": \"png\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>Filename of the target</p> required"},{"location":"api/core/data.html","title":"Data","text":""},{"location":"api/core/data.html#gsp.core.data.Data","title":"Data","text":"<pre><code>Data(uri: str = '', nbytes: int = 0, dtype: list = None)\n</code></pre> <p>Data represents a block of raw binary data, with an optional structure. This data is built using the provided uri that may either point to an external file, or be a data URI that encodes the binary data directly in the JSON file. When an uri is provided, data will is fetched just in time and stored locally. If no uri has been provided, an empty data is created ex-nihilo, just in time. Data can be modified and is tracked for any modification.</p> Example PYTHONTEXTJSON <pre><code>from gsp.core.data import Data\ndata = Data(nbytes=512, dtype=[(\"color\", 1, \"u4\")])\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Data\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-21T12:52:32.671017 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - NBYTES: 512 (int)\n     - DTYPE: [('color', 1, 'u4')] (list)\n     - URI:  (str)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Data\",\n      \"id\": 1,\n      \"timestamp\": 1724237552.671017,\n      \"parameters\": {\n        \"id\": 1,\n        \"nbytes\": 512,\n        \"dtype\": [\n          [\n            \"color\",\n            1,\n            \"u4\"\n          ]\n        ],\n        \"uri\": \"\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Data represents a block of raw binary data, with an optional structure.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Uniform Resource Identifier from where to fetch data.</p> <code>''</code> <code>nbytes</code> <code>int</code> <p>Number of bytes in the data. This is used to create data ex-nihilo if no uri has been provided. If a dtype is provided, the nbytes is discarded in favor of the size of the provided structure.</p> <code>0</code> <code>dtype</code> <code>list</code> <p>Description of the internal structure of the data as a list of (<code>name</code> (str), <code>type</code> (str), <code>count</code> (int)) items.</p> <p>with:</p> Type Kind <code>i[1,2,4]</code> signed integer (8,16, 32 bits) <code>u[1,2,4]</code> unsigned integer (8,16, 32 bits) <code>f[2,4,8]</code> float (16, 32, 64 bits) <code>m</code> timedelta (64 bits) <code>M</code> datetime (64 bits) <code>U[n]</code> unicode string (n x 16 bits) <code>None</code>"},{"location":"api/core/data.html#gsp.core.data.Data.set_data","title":"set_data","text":"<pre><code>set_data(offset: int, data: bytes)\n</code></pre> <p>Update data content at given offset with new data.</p> Example PYTHONTEXTJSON <pre><code>import numpy as np\nfrom gsp.core.data import Data\n\nnbytes = 2*np.float32(0).nbytes\ndata = Data(nbytes=nbytes, dtype=[\"f4\"])\ndata.set_data(0, bytes(nbytes))\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Data\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-21T12:52:32.818035 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - NBYTES: 8 (int)\n     - DTYPE: ['f4'] (list)\n     - URI:  (str)\n\n2. COMMAND\n     - METHOD: \"Data/set_data\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-08-21T12:52:32.818075 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - OFFSET: 0 (int)\n     - DATA: b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' (bytes)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Data\",\n      \"id\": 1,\n      \"timestamp\": 1724237552.818035,\n      \"parameters\": {\n        \"id\": 1,\n        \"nbytes\": 8,\n        \"dtype\": [\n          \"f4\"\n        ],\n        \"uri\": \"\"\n      }\n    },\n    {\n      \"method\": \"Data/set_data\",\n      \"id\": 2,\n      \"timestamp\": 1724237552.818075,\n      \"parameters\": {\n        \"id\": 1,\n        \"offset\": 0,\n        \"data\": \"AAAAAAAAAAA=\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>Offset in bytes where to start update</p> required <code>data</code> <code>bytes</code> <p>Content to update with.</p> required"},{"location":"api/core/viewport.html","title":"Viewport","text":""},{"location":"api/core/viewport.html#gsp.core.viewport.Viewport","title":"Viewport","text":"<pre><code>Viewport(\n    canvas: Canvas,\n    x: int,\n    y: int,\n    width: int,\n    height: int,\n    color: Color | list | tuple,\n)\n</code></pre> <p>A viewport is a rectangular two-dimensional surface from a canvas, located at (x, y) coordinates (bottom left corner) with size equal to width\u00d7height pixels and a background color.</p> <p>Notes</p> <p>Future implementation will allows viewports to have an arbitrary rotation.</p> Example PYTHONTEXTJSON <pre><code>from gsp.core import Canvas, Viewport\ncanvas = Canvas(512, 512, 100.0)\nviewport = Viewport(canvas, 0, 0, 512, 512, (0,0,0,1))\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-21T12:52:33.498949 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 100.0 (float)\n\n2. COMMAND\n     - METHOD: \"core.Viewport\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-08-21T12:52:33.499016 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - CANVAS_ID: 1 (Canvas)\n     - X: 0 (int)\n     - Y: 0 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - COLOR: [0, 0, 0, 1] (converted) (Color | list | tuple)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1724237553.498949,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 100.0\n      }\n    },\n    {\n      \"method\": \"core.Viewport\",\n      \"id\": 2,\n      \"timestamp\": 1724237553.499016,\n      \"parameters\": {\n        \"id\": 2,\n        \"canvas(id)\": 1,\n        \"x\": 0,\n        \"y\": 0,\n        \"width\": 512,\n        \"height\": 512,\n        \"color\": [\n          0,\n          0,\n          0,\n          1\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <p>A viewport is a rectangular two-dimensional surface.</p> <p>Parameters:</p> Name Type Description Default <code>canvas</code> <code>Canvas</code> <p>Canvas where to create the viewport</p> required <code>x</code> <code>int</code> <p>X coordinate of the viewport bottom left corner</p> required <code>y</code> <code>int</code> <p>Y coordinate of the viewport bottom left corner</p> required <code>width</code> <code>int</code> <p>Width of the viewport in pixels.</p> required <code>height</code> <code>int</code> <p>Height of the viewport in pixels.</p> required <code>color</code> <code>Color | list | tuple</code> <p>Background color of the viewport</p> required"},{"location":"api/core/viewport.html#gsp.core.viewport.Viewport.render","title":"render","text":"<pre><code>render(target: str)\n</code></pre> <p>Render the viewport to the specified target. If no target is specified, return a raw image as bytes.</p> Example PYTHONTEXTJSON <pre><code>from gsp.core import Canvas, Viewport\ncanvas = Canvas(512, 512, 100.0)\nviewport = Viewport(canvas, 0, 0, 512, 512, (0,0,0,1))\nviewport.render(\"png\")\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-21T12:52:33.569851 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 100.0 (float)\n\n2. COMMAND\n     - METHOD: \"core.Viewport\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-08-21T12:52:33.569916 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - CANVAS_ID: 1 (Canvas)\n     - X: 0 (int)\n     - Y: 0 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - COLOR: [0, 0, 0, 1] (converted) (Color | list | tuple)\n\n3. COMMAND\n     - METHOD: \"Viewport/render\" (str)\n     - COMMAND_ID: 3 (int)\n     - TIMESTAMP: 2024-08-21T12:52:33.569939 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - TARGET: png (str)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1724237553.569851,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 100.0\n      }\n    },\n    {\n      \"method\": \"core.Viewport\",\n      \"id\": 2,\n      \"timestamp\": 1724237553.569916,\n      \"parameters\": {\n        \"id\": 2,\n        \"canvas(id)\": 1,\n        \"x\": 0,\n        \"y\": 0,\n        \"width\": 512,\n        \"height\": 512,\n        \"color\": [\n          0,\n          0,\n          0,\n          1\n        ]\n      }\n    },\n    {\n      \"method\": \"Viewport/render\",\n      \"id\": 3,\n      \"timestamp\": 1724237553.569939,\n      \"parameters\": {\n        \"id\": 2,\n        \"target\": \"png\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>Filename of the target</p> required"},{"location":"api/io/command.html","title":"Command","text":""},{"location":"api/io/command.html#gsp.io.command.CommandQueue","title":"CommandQueue","text":"<pre><code>CommandQueue(name: str = 'active')\n</code></pre> <p>A command queue allows to store a list of Command that can be ran later.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the queue. The default queue is the \"active\" one, that is, the latest created one.</p> <code>'active'</code>"},{"location":"api/io/command.html#gsp.io.command.Command","title":"Command","text":"<pre><code>Command(\n    classname, methodname, parameters, annotations=None\n)\n</code></pre> <p>Generic command with a unique id.</p> <p>Build a new command with a unique command id (cid)</p> <p>Parameters:</p> Name Type Description Default <code>classname</code> <code>string</code> <p>Name of the class</p> required <code>methodname</code> <code>string</code> <p>Name of the method</p> required <code>parameters</code> <code>dict</code> <p>Dictionnary of parameters</p> required <code>annotations</code> <code>dict</code> <p>Annoated type of the called method</p> <code>None</code> <p>Examples:</p> <pre><code>class Foo(Object):\n    def __init__(self, value : int):\n        self.value = value\n\ncommand = Command(\"Foo\", \"__init__\", {\"value\" : 1})\nfoo = command.execute()\n</code></pre>"},{"location":"api/io/command.html#gsp.io.command.command","title":"command","text":"<pre><code>command(name=None)\n</code></pre> <p>Function decorator that creates a command when the function is called and optionally record it. The name of the method can can be overriden with the provided name.</p>"},{"location":"api/transform/accessors.html","title":"Accessors","text":""},{"location":"api/transform/accessors.html#gsp.transform.Accessor","title":"Accessor","text":"<pre><code>Accessor(\n    buffer: Transform | Buffer = None, key: str = None\n)\n</code></pre> <p>Accessor transform allows to access a specific field in a Buffer</p> <p>Accessor transform allows to access a specific field in a Buffer.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Name of the field to access</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.X","title":"X","text":"<pre><code>X(buffer: Transform | Buffer = None)\n</code></pre> <p>X Accessor (first field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.X.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.X.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.X.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Y","title":"Y","text":"<pre><code>Y(buffer: Transform | Buffer = None)\n</code></pre> <p>Y Accessor (second field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.Y.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Y.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Y.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Z","title":"Z","text":"<pre><code>Z(buffer: Transform | Buffer = None)\n</code></pre> <p>Z Accessor (third field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.Z.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Z.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.Z.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.W","title":"W","text":"<pre><code>W(buffer: Transform | Buffer = None)\n</code></pre> <p>W Accessor (fourth field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.W.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.W.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.W.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.R","title":"R","text":"<pre><code>R(buffer: Transform | Buffer = None)\n</code></pre> <p>R Accessor (first field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.R.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.R.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.R.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.G","title":"G","text":"<pre><code>G(buffer: Transform | Buffer = None)\n</code></pre> <p>G Accessor (second field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.G.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.G.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.G.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.B","title":"B","text":"<pre><code>B(buffer: Transform | Buffer = None)\n</code></pre> <p>B Accessor (third field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.B.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.B.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.B.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.A","title":"A","text":"<pre><code>A(buffer: Transform | Buffer = None)\n</code></pre> <p>A Accessor (fourth field)</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/accessors.html#gsp.transform.A.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.A.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.A.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/colormap.html","title":"Colormap","text":""},{"location":"api/transform/colormap.html#gsp.transform.Colormap","title":"Colormap","text":"<pre><code>Colormap(colormap: str = None)\n</code></pre> <p>Colormap transform allows to map a scalar to a color</p> <p>Colormap transform allows to map a scalar to a color</p> Example PYTHONTEXTJSON <pre><code>from gsp.transform import Colormap\ncolormap = Colormap(\"viridis\")\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"transform.Colormap\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-21T12:52:33.753046 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - COLORMAP: viridis (str)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"transform.Colormap\",\n      \"id\": 1,\n      \"timestamp\": 1724237553.753046,\n      \"parameters\": {\n        \"id\": 1,\n        \"colormap\": \"viridis\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>colormap</code> <code>str</code> <p>Name of the colormap</p> <code>None</code>"},{"location":"api/transform/colormap.html#gsp.transform.Colormap.set_colormap","title":"set_colormap","text":"<pre><code>set_colormap(colormap: str)\n</code></pre> <p>Set the colormap</p> Example PYTHONTEXTJSON <pre><code>from gsp.transform import Colormap\ncolormap = Colormap(\"viridis\")\ncolormap.set_colormap(\"inferno\")\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"transform.Colormap\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-21T12:52:33.820752 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - COLORMAP: viridis (str)\n\n2. COMMAND\n     - METHOD: \"Colormap/set_colormap\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-08-21T12:52:33.820783 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - COLORMAP: inferno (str)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"transform.Colormap\",\n      \"id\": 1,\n      \"timestamp\": 1724237553.820752,\n      \"parameters\": {\n        \"id\": 1,\n        \"colormap\": \"viridis\"\n      }\n    },\n    {\n      \"method\": \"Colormap/set_colormap\",\n      \"id\": 2,\n      \"timestamp\": 1724237553.820783,\n      \"parameters\": {\n        \"id\": 1,\n        \"colormap\": \"inferno\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>colormap</code> <code>str</code> <p>Name of the colormap</p> required"},{"location":"api/transform/light.html","title":"Light","text":""},{"location":"api/transform/light.html#gsp.transform.Light","title":"Light","text":"<pre><code>Light(\n    direction: list = (1, 1, 1),\n    ambient_color: Color = (1, 0, 0, 0.2),\n    diffuse_color: Color = (1, 1, 1, 0.8),\n    specular_color: Color = (1, 1, 1, 0),\n)\n</code></pre> <p>Light transform allows to modify faces color according to light parameters</p> <p>Light transform allows to modify faces color according to light parameters</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>list</code> <p>Direction of the light</p> <code>(1, 1, 1)</code> <code>ambient_color</code> <code>Color</code> <p>Ambient color, alpha component being strength</p> <code>(1, 0, 0, 0.2)</code> <code>diffuse_color</code> <code>Color</code> <p>Diffuse color, alpha component being strength</p> <code>(1, 1, 1, 0.8)</code> <code>specular_color</code> <code>Color</code> <p>Specular color, alpha component being shininess</p> <code>(1, 1, 1, 0)</code>"},{"location":"api/transform/measures.html","title":"Measures","text":""},{"location":"api/transform/measures.html#gsp.transform.Measure","title":"Measure","text":"<pre><code>Measure()\n</code></pre> <p>A Measure transform allows to convert a measure expressed in some units (Pixel, Point, Inch, etc.) to normalized device coordinates ([-1,+1] x [-1,+1]). This conversion is always relative to a given Viewport whose width and height dictates the conversion.</p> <p>Notes</p> <p>The normalization of a measure (conversion to NDC) migth be different on the x or y axis depending on the size of the related viewport. This means, for example, that the expression <code>10*pixel</code> is translated differently along <code>x</code> (1st component) and <code>y</code> axis (second component). The <code>z</code> coordinate is not changed during conversion since measures are targeting 2D coordinates.</p> <p>Examples:</p> <pre><code>canvas = core.Canvas(512, 512, 100.0)\nviewport = core.Viewport(canvas, color=(1,1,0,1))\n\n# 10 pixels from bottom left corner\npixel = transform.Pixel()\nP = [-1,-1,0] + 10*pixel\n\n# 10 points from left, 20 points from bottom\npoint = transform.Point()\nP = [-1,-1,0] + (10,20,0)*point\n</code></pre>"},{"location":"api/transform/measures.html#gsp.transform.Pixel","title":"Pixel","text":"<pre><code>Pixel()\n</code></pre> <p>Conversion of a measure to pixel.</p>"},{"location":"api/transform/measures.html#gsp.transform.Point","title":"Point","text":"<pre><code>Point()\n</code></pre> <p>Conversion of a measure to point</p>"},{"location":"api/transform/measures.html#gsp.transform.Inch","title":"Inch","text":"<pre><code>Inch()\n</code></pre> <p>Conversion of a measure to inch.</p>"},{"location":"api/transform/measures.html#gsp.transform.Millimeter","title":"Millimeter","text":"<pre><code>Millimeter()\n</code></pre> <p>Conversion of a measure to millimeter</p>"},{"location":"api/transform/measures.html#gsp.transform.Centimeter","title":"Centimeter","text":"<pre><code>Centimeter()\n</code></pre> <p>Conversion of a measure to centimeter</p>"},{"location":"api/transform/measures.html#gsp.transform.Meter","title":"Meter","text":"<pre><code>Meter()\n</code></pre> <p>Conversion of a measure to meter</p>"},{"location":"api/transform/measures.html#gsp.transform.Kilometer","title":"Kilometer","text":"<pre><code>Kilometer()\n</code></pre> <p>Conversion of a measure to kilometer</p>"},{"location":"api/transform/operators.html","title":"Operators","text":""},{"location":"api/transform/operators.html#gsp.transform.Operator","title":"Operator","text":"<pre><code>Operator(\n    operator: str,\n    left: Transform | Buffer = None,\n    right: Transform | Buffer = None,\n)\n</code></pre> <p>Arithmetic operator to compose two transforms</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator description, one of: <code>+</code> (addition), <code>-</code> (subtraction), <code>/</code> (division), <code>*</code> (mutliplication),</p> required <code>left</code> <code>Transform | Buffer</code> <p>Left operand (transform or buffer)</p> <code>None</code> <code>right</code> <code>Transform | Buffer</code> <p>Right operand (transform or buffer)</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Operator.set_operator","title":"set_operator","text":"<pre><code>set_operator(operator: str)\n</code></pre> <p>Set operator</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator</p> required"},{"location":"api/transform/operators.html#gsp.transform.Operator.set_left","title":"set_left","text":"<pre><code>set_left(left: Transform)\n</code></pre> <p>Set left operand</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Transform</code> <p>Left operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Operator.set_right","title":"set_right","text":"<pre><code>set_right(right: Transform)\n</code></pre> <p>Set right operand</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Transform</code> <p>Righ operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Add","title":"Add","text":"<pre><code>Add(\n    left: Transform | Buffer = None,\n    right: Transform | Buffer = None,\n)\n</code></pre> <p>Arithmetic addition of left and right</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Shallow copy</p>"},{"location":"api/transform/operators.html#gsp.transform.Add.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Add.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Add.set_left","title":"set_left","text":"<pre><code>set_left(left: Transform)\n</code></pre> <p>Set left operand</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Transform</code> <p>Left operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Add.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Add.set_operator","title":"set_operator","text":"<pre><code>set_operator(operator: str)\n</code></pre> <p>Set operator</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator</p> required"},{"location":"api/transform/operators.html#gsp.transform.Add.set_right","title":"set_right","text":"<pre><code>set_right(right: Transform)\n</code></pre> <p>Set right operand</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Transform</code> <p>Righ operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Sub","title":"Sub","text":"<pre><code>Sub(\n    left: Transform | Buffer = None,\n    right: Transform | Buffer = None,\n)\n</code></pre> <p>Arithmetic subtraction of left and right</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Shallow copy</p>"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_left","title":"set_left","text":"<pre><code>set_left(left: Transform)\n</code></pre> <p>Set left operand</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Transform</code> <p>Left operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_operator","title":"set_operator","text":"<pre><code>set_operator(operator: str)\n</code></pre> <p>Set operator</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator</p> required"},{"location":"api/transform/operators.html#gsp.transform.Sub.set_right","title":"set_right","text":"<pre><code>set_right(right: Transform)\n</code></pre> <p>Set right operand</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Transform</code> <p>Righ operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Mul","title":"Mul","text":"<pre><code>Mul(\n    left: Transform | Buffer = None,\n    right: Transform | Buffer = None,\n)\n</code></pre> <p>Arithmetic multiplication of left and right</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Shallow copy</p>"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_left","title":"set_left","text":"<pre><code>set_left(left: Transform)\n</code></pre> <p>Set left operand</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Transform</code> <p>Left operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_operator","title":"set_operator","text":"<pre><code>set_operator(operator: str)\n</code></pre> <p>Set operator</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator</p> required"},{"location":"api/transform/operators.html#gsp.transform.Mul.set_right","title":"set_right","text":"<pre><code>set_right(right: Transform)\n</code></pre> <p>Set right operand</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Transform</code> <p>Righ operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Div","title":"Div","text":"<pre><code>Div(\n    left: Transform | Buffer = None,\n    right: Transform | Buffer = None,\n)\n</code></pre> <p>Arithmetic division of left and right</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.__call__","title":"__call__","text":"<pre><code>__call__(other)\n</code></pre> <p>Chain (Transform) or bind (Buffer) self and other.</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Shallow copy</p>"},{"location":"api/transform/operators.html#gsp.transform.Div.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Div.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Div.set_left","title":"set_left","text":"<pre><code>set_left(left: Transform)\n</code></pre> <p>Set left operand</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Transform</code> <p>Left operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Div.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Div.set_operator","title":"set_operator","text":"<pre><code>set_operator(operator: str)\n</code></pre> <p>Set operator</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator</p> required"},{"location":"api/transform/operators.html#gsp.transform.Div.set_right","title":"set_right","text":"<pre><code>set_right(right: Transform)\n</code></pre> <p>Set right operand</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Transform</code> <p>Righ operand (transform or buffer)</p> required"},{"location":"api/transform/out.html","title":"Out","text":""},{"location":"api/transform/out.html#gsp.transform.Out","title":"Out","text":"<pre><code>Out(name: str = None)\n</code></pre> <p>An out transform is a just in time (JIT) transform that allows to access a variable that is produced by a visual during rendering.</p> <p>Build the transform</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the buffer that have been produced by the visual. A specific key can be specified using the dot notation (e.g. \"screen.x\", \"screen.yx\").</p> <code>None</code>"},{"location":"api/transform/out.html#gsp.transform.Out.base","title":"base  <code>property</code>","text":"<pre><code>base\n</code></pre> <p>The base transform this transform is based on</p>"},{"location":"api/transform/out.html#gsp.transform.Out.bound","title":"bound  <code>property</code>","text":"<pre><code>bound\n</code></pre> <p>Indicate if this transform is bound</p>"},{"location":"api/transform/out.html#gsp.transform.Out.buffer","title":"buffer  <code>property</code>","text":"<pre><code>buffer\n</code></pre> <p>Buffer on which to apply the transform.</p>"},{"location":"api/transform/out.html#gsp.transform.Out.last","title":"last  <code>property</code>","text":"<pre><code>last\n</code></pre> <p>The last transform in the chain of transforms</p>"},{"location":"api/transform/out.html#gsp.transform.Out.next","title":"next  <code>property</code>","text":"<pre><code>next\n</code></pre> <p>The next transform in the chain of transforms</p>"},{"location":"api/transform/out.html#gsp.transform.Out.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Copy the transform</p>"},{"location":"api/transform/out.html#gsp.transform.Out.evaluate","title":"evaluate","text":"<pre><code>evaluate(variables: dict)\n</code></pre> <p>Evaluate the transform</p> <p>Parameters:</p> Name Type Description Default <code>variables</code> <code>dict</code> <p>Dictionary of out variables produced by a visual</p> required"},{"location":"api/transform/out.html#gsp.transform.Out.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/out.html#gsp.transform.Out.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/transform/out.html#gsp.transform.Out.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/transform.html","title":"Transform","text":""},{"location":"api/transform/transform.html#gsp.transform.Transform","title":"Transform","text":"<pre><code>Transform(\n    base: Transform = None,\n    next: Transform = None,\n    buffer: Buffer = None,\n)\n</code></pre> <p>A Transform allows to apply an arbitratry transformation to a buffer. Any transform can be bound to a specific buffer and used in place of a Buffer where needed. Several transforms can be chained or composed together.</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on. When non null, all transform parameters are read from the base.</p> <code>None</code> <code>next</code> <code>Transform</code> <p>A transformation can be chained with another transform (<code>next</code>). In such case, the <code>next</code> transform is applied first and result is passed to the current transform.</p> <code>None</code> <code>buffer</code> <code>Buffer</code> <p>Buffer on which to apply the transform. When non null, the transformation is bound and cannot be modified anymore.</p> <code>None</code>"},{"location":"api/transform/transform.html#gsp.transform.Transform.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/transform.html#gsp.transform.Transform.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/transform.html#gsp.transform.Transform.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"},{"location":"api/visual/pixels.html","title":"Pixels","text":""},{"location":"api/visual/pixels.html#gsp.visual.Pixels","title":"Pixels","text":"<pre><code>Pixels(\n    positions: Transform | Buffer,\n    colors: Transform | Buffer | Color,\n)\n</code></pre> <p>Pixels are the smallest entities that can be rendered on screen (pixel or fragment) or on paper (dot). They can be colored but have no dimension and correspond to the true mathematical notion of a point.</p> IN/OUT variables  <pre><code>// Rendering stage 1\nin uniform vec4 viewport;               // in(\"viewport\")\nin attribute [ vec2 | vec3 ] positions; // in(\"positions\")\nin [ attribute | uniform ] vec4 colors; // in(\"colors\")\n\n// Rendering stage 2\nout attribute vec3 screen;              // out(\"screen[positions]\")\n\n// Rendering stage 3\nout attribute vec4 colors;              // out(\"colors\")\n</code></pre> Example PYTHONTEXTJSON <pre><code>positions = core.Buffer(3, np.dtype(np.float32))\npixels = visual.Pixels(positions, colors=(0,0,0,1))\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Buffer\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-21T12:52:34.023398 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - COUNT: 3 (int)\n     - DTYPE: float32 (dtype)\n     - DATA: None (memoryview | bytes)\n\n2. COMMAND\n     - METHOD: \"visual.Pixels\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-08-21T12:52:34.023470 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - POSITIONS_ID: 1 (Transform | Buffer)\n     - COLORS: Color(r=0, g=0, b=0, a=1) (converted) (Transform | Buffer | Color)\n\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Buffer\",\n      \"id\": 1,\n      \"timestamp\": 1724237554.023398,\n      \"parameters\": {\n        \"id\": 1,\n        \"count\": 3,\n        \"dtype\": \"float32\",\n        \"data\": null\n      }\n    },\n    {\n      \"method\": \"visual.Pixels\",\n      \"id\": 2,\n      \"timestamp\": 1724237554.02347,\n      \"parameters\": {\n        \"id\": 2,\n        \"positions(id)\": 1,\n        \"colors\": [\n          0,\n          0,\n          0,\n          1\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <p>Create a Pixels visual at given positions and given colors. If positions is a transform, it is first evaluated and produce the \"screen\" and \"depth\" buffers. If the type of positions is vec2, the z coordinate of all pixels is set to the default z coordinate (0). If colors is a transform, it is first evaluated and produce the \"colors\" buffer.</p> <p>Parameters:</p> Name Type Description Default <code>positions</code> <code>Transform | Buffer</code> <p>Pixel positions (vec3 or vec2)</p> required <code>colors</code> <code>Transform | Buffer | Color</code> <p>Pixel colors (vec4)</p> required"},{"location":"api/visual/pixels.html#gsp.visual.Pixels.render","title":"render","text":"<pre><code>render(\n    viewport: Viewport,\n    model: Matrix = None,\n    view: Matrix = None,\n    proj: Matrix = None,\n)\n</code></pre> <p>Render the visual on viewport using the given model, view, proj matrices</p> <p>Parameters:</p> Name Type Description Default <code>viewport</code> <code>Viewport</code> <p>Viewport where to render the visual</p> required <code>model</code> <code>mat4</code> <p>Model matrix to use for rendering</p> <code>None</code> <code>view</code> <code>mat4</code> <p>View matrix to use for rendering</p> <code>None</code> <code>proj</code> <code>mat4</code> <p>Projection matrix to use for rendering</p> <code>None</code>"},{"location":"python/command.html","title":"Code instrumentation","text":"<p>The Python implementation of the protocol relies on the automatic code instrumentation that is implemented through the command function decorator. This decorator registers all necessary information when a method is called and offers convenient conversion functions. This works by inspecting the declared type of a method (using function annotations) and checking of the provided type has the right type. If this is not the case, the command search for a converter among those registered.</p> Code instrumentationOutput <pre><code>import gsp\n\n@gsp.io.register(\"float\", \"int\")\ndef float_to_int(value): return int(value)\n\nclass Foo(gsp.Object):\n    @gsp.io.command(\"CREATE\")\n    def __init__(self, value : int):\n        gsp.Object.__init__(self)\n        self.value = value\n\nfoos = Foo(1), Foo(2)\nprint(gsp.io.queue(\"active\"))\n</code></pre> <pre><code>CommandQueue(\"default\", active, read-write) : 2 command(s)\n  - Command #1: Foo(id=1)/CREATE(\u2026)\n  - Command #2: Foo(id=2)/CREATE(\u2026)\n</code></pre>"},{"location":"python/command.html#command-related-functions","title":"Command related functions","text":""},{"location":"python/command.html#gsp.io.command.queue","title":"queue","text":"<pre><code>queue(name='default')\n</code></pre> <p>Return a new or existing command queue. There is a special name \"active\" that relates to the current command queue. Each time a queue is created, it becomes automatically the active one.</p>"},{"location":"python/command.html#gsp.io.command.record","title":"record","text":"<pre><code>record(state: bool = False)\n</code></pre> <p>Activate (state=True) or deactivate (state=False) global command recording (for all command queues).</p>"},{"location":"python/command.html#gsp.io.command.command","title":"command","text":"<pre><code>command(name=None)\n</code></pre> <p>Function decorator that creates a command when the function is called and optionally record it. The name of the method can can be overriden with the provided name.</p>"},{"location":"python/command.html#conversion-related-functions","title":"Conversion related functions","text":""},{"location":"python/command.html#gsp.io.convert.register","title":"register","text":"<pre><code>register(src_types: str | tuple[str, ...], dst_type: str)\n</code></pre> <p>Function decorator that registers a converter from <code>src_types</code> to <code>dst_type</code></p>"},{"location":"python/command.html#gsp.io.convert.unregister","title":"unregister","text":"<pre><code>unregister(src_types: str | tuple[str, ...], dst_type: str)\n</code></pre> <p>Unregister converters from <code>src_types</code> to <code>dst_type</code>.</p>"},{"location":"python/command.html#gsp.io.convert.convert","title":"convert","text":"<pre><code>convert(value: object, dst_type: str)\n</code></pre> <p>Return a converter from <code>value</code> type to <code>dst_type</code>, if there exists such a converter.</p>"},{"location":"python/glm.html","title":"OpenGL mathematics","text":"<p>This is a test</p>"},{"location":"python/memory.html","title":"Memory management","text":"<p>This is a test</p>"}]}