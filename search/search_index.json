{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>The Graphic Server Protocol (GSP) is meant to be an API between hardware and software, targeted at developpers who do not want to dive into the arcane of OpenGL, Metal or Vulkan but still want to benefit from GPU speed, versatily and quality.</p> <p>The overall goal of GSP is not to provide a general graphics API but rather to address only scientific visualization, which requires a far fewer number of objects and concepts, with specific requirements on rendering quality though. The API is voluntarily small and targets the smallest set of visuals that allow to render the vast majority of scientific plots (2d or 3d).</p>"},{"location":"api/protocol.html","title":"Protocol","text":""},{"location":"api/protocol.html#header-part","title":"Header Part","text":"<pre><code>/**\n * Defines an integer number in the range of -2^31 to 2^31 - 1.\n */\nexport type integer = number;\n</code></pre>"},{"location":"api/protocol.html#content-part","title":"Content Part","text":""},{"location":"api/protocol.html#base-types","title":"Base Types","text":""},{"location":"api/protocol.html#request-message","title":"Request Message","text":""},{"location":"api/protocol.html#response-message","title":"Response Message","text":""},{"location":"api/protocol.html#notification-message","title":"Notification Message","text":""},{"location":"api/core/buffer.html","title":"Buffer","text":""},{"location":"api/core/buffer.html#gsp.core.buffer.Buffer","title":"Buffer","text":"<pre><code>Buffer(count: int, dtype: list)\n</code></pre> <p>Buffer represents a structured view on some Data or Buffer. Buffer can be a partial or whole view on the underlying source.</p> <p></p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>Number of item</p> required <code>dtype</code> <code>str</code> <p>Type of the item</p> required"},{"location":"api/core/buffer.html#gsp.core.buffer.Buffer.set_data","title":"set_data","text":"<pre><code>set_data(offset: int, data: bytes)\n</code></pre> <p>Update buffer content at given offset with new data.</p> <p></p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>Offset in bytes where to start update</p> required <code>data</code> <code>bytes</code> <p>Content to update with.</p> required"},{"location":"api/core/canvas.html","title":"Canvas","text":""},{"location":"api/core/canvas.html#gsp.core.canvas.Canvas","title":"Canvas","text":"<pre><code>Canvas(width: int, height: int, dpi: float)\n</code></pre> <p>A Canvas is a two-dimensional drawing area of size width \u00d7 height pixels using the specified dpi (dots per inch).</p> Info <ul> <li>A canvas uses a standard color space with at least 8 bits per channel.</li> <li>Blending mode is alpha blending</li> <li>The <code>(0,0)</code> coordinates corresponds to the bottom left corner.</li> <li>A typographical point is 1/72 inch.</li> </ul> Example PYTHONTEXTYAMLJSON <pre><code>from gsp.core.canvas import Canvas\ncanvas = Canvas(512, 512, 101.0)\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-11T22:30:43.929625 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 101.0 (float)\n\n</code></pre> <pre><code>- method: core.Canvas\n  cid: 1\n  timestamp: 1723408243.929625\n  parameters: {id: 1, width: 512, height: 512, dpi: 101.0}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1723408243.929625,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 101.0\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of the drawing area in pixels.</p> required <code>height</code> <code>int</code> <p>Height of the drawing area in pixels.</p> required <code>dpi</code> <code>float</code> <p>Dots per inch</p> required"},{"location":"api/core/canvas.html#gsp.core.canvas.Canvas.render","title":"render","text":"<pre><code>render(target: str)\n</code></pre> <p>Render the canvas the to specified target. If no target is specified, return a raw image as bytes.</p> Example PYTHONTEXTYAMLJSON <pre><code>from gsp.core.canvas import Canvas\ncanvas = Canvas(512, 512, 100.0)\ncanvas.render(\"png\")\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.010546 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 100.0 (float)\n\n2. COMMAND\n     - METHOD: \"Canvas/render\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.010581 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - TARGET: png (str)\n\n</code></pre> <pre><code>- method: core.Canvas\n  cid: 1\n  timestamp: 1723408244.010546\n  parameters: {id: 1, width: 512, height: 512, dpi: 100.0}\n- method: Canvas/render\n  cid: 2\n  timestamp: 1723408244.010581\n  parameters: {id: 1, target: png}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1723408244.010546,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 100.0\n      }\n    },\n    {\n      \"method\": \"Canvas/render\",\n      \"id\": 2,\n      \"timestamp\": 1723408244.010581,\n      \"parameters\": {\n        \"id\": 1,\n        \"target\": \"png\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>Filename of the target</p> required"},{"location":"api/core/data.html","title":"Data","text":""},{"location":"api/core/data.html#gsp.core.data.Data","title":"Data","text":"<pre><code>Data(uri: str = '', nbytes: int = 0, dtype: list = None)\n</code></pre> <p>Data represents a block of raw binary data, with an optional structure. This data is built using the provided uri that may either point to an external file, or be a data URI that encodes the binary data directly in the JSON file. When an uri is provided, data will is fetched just in time and stored locally. If no uri has been provided, an empty data is created ex-nihilo, just in time. Data can be modified and is tracked for any modification.</p> Example PYTHONTEXTYAMLJSON <pre><code>from gsp.core.data import Data\ndata = Data(nbytes=512, dtype=[(\"color\", 1, \"u4\")])\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Data\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.091455 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - NBYTES: 512 (int)\n     - DTYPE: [('color', 1, 'u4')] (list)\n     - URI:  (str)\n\n</code></pre> <pre><code>- method: core.Data\n  cid: 1\n  timestamp: 1723408244.091455\n  parameters:\n    id: 1\n    nbytes: 512\n    dtype:\n    - !!python/tuple [color, 1, u4]\n    uri: ''\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Data\",\n      \"id\": 1,\n      \"timestamp\": 1723408244.091455,\n      \"parameters\": {\n        \"id\": 1,\n        \"nbytes\": 512,\n        \"dtype\": [\n          [\n            \"color\",\n            1,\n            \"u4\"\n          ]\n        ],\n        \"uri\": \"\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Uniform Resource Identifier from where to fetch data.</p> <code>''</code> <code>nbytes</code> <code>int</code> <p>Number of bytes in the data. This is used to create data ex-nihilo if no uri has been provided. If a dtype is provided, the nbytes is discarded in favor of the size of the provided structure.</p> <code>0</code> <code>dtype</code> <code>list</code> <p>Description of the internal structure of the data as a list of (<code>name</code> (str), <code>type</code> (str), <code>count</code> (int)) items.</p> <p>with:</p> Type Kind <code>i[1,2,4]</code> signed integer (8,16, 32 bits) <code>u[1,2,4]</code> unsigned integer (8,16, 32 bits) <code>f[2,4,8]</code> float (16, 32, 64 bits) <code>m</code> timedelta (64 bits) <code>M</code> datetime (64 bits) <code>U[n]</code> unicode string (n x 16 bits) <code>None</code>"},{"location":"api/core/data.html#gsp.core.data.Data.set_data","title":"set_data","text":"<pre><code>set_data(offset: int, data: bytes)\n</code></pre> <p>Update data content at given offset with new data.</p> Example PYTHONTEXTYAMLJSON <pre><code>import numpy as np\nfrom gsp.core.data import Data\n\nnbytes = 2*np.float32(0).nbytes\ndata = Data(nbytes=nbytes, dtype=[\"f4\"])\ndata.set_data(0, bytes(nbytes))\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Data\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.171950 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - NBYTES: 8 (int)\n     - DTYPE: ['f4'] (list)\n     - URI:  (str)\n\n2. COMMAND\n     - METHOD: \"Data/set_data\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.171989 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - OFFSET: 0 (int)\n     - DATA: b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' (bytes)\n\n</code></pre> <pre><code>- method: core.Data\n  cid: 1\n  timestamp: 1723408244.17195\n  parameters:\n    id: 1\n    nbytes: 8\n    dtype: [f4]\n    uri: ''\n- method: Data/set_data\n  cid: 2\n  timestamp: 1723408244.171989\n  parameters:\n    id: 1\n    offset: 0\n    data: !!binary |\n      AAAAAAAAAAA=\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Data\",\n      \"id\": 1,\n      \"timestamp\": 1723408244.17195,\n      \"parameters\": {\n        \"id\": 1,\n        \"nbytes\": 8,\n        \"dtype\": [\n          \"f4\"\n        ],\n        \"uri\": \"\"\n      }\n    },\n    {\n      \"method\": \"Data/set_data\",\n      \"id\": 2,\n      \"timestamp\": 1723408244.171989,\n      \"parameters\": {\n        \"id\": 1,\n        \"offset\": 0,\n        \"data\": \"AAAAAAAAAAA=\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>Offset in bytes where to start update</p> required <code>data</code> <code>bytes</code> <p>Content to update with.</p> required"},{"location":"api/core/viewport.html","title":"Viewport","text":""},{"location":"api/core/viewport.html#gsp.core.viewport.Viewport","title":"Viewport","text":"<pre><code>Viewport(\n    canvas: Canvas,\n    x: int,\n    y: int,\n    width: int,\n    height: int,\n    color: tuple,\n)\n</code></pre> <p>A viewport is a rectangular two-dimensional surface from a canvas, located at (x, y) coordinates (bottom left corner) with size equal to width\u00d7height pixels and a background color.</p> <p>Notes</p> <p>Future implementation will allows viewports to have an arbitrary rotation.</p> Example PYTHONTEXTYAMLJSON <pre><code>from gsp.core import Canvas, Viewport\ncanvas = Canvas(512, 512, 100.0)\nviewport = Viewport(canvas, 0, 0, 512, 512, (0,0,0,1))\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.310484 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 100.0 (float)\n\n2. COMMAND\n     - METHOD: \"core.Viewport\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.310533 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - CANVAS: 1 (Canvas)\n     - X: 0 (int)\n     - Y: 0 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - COLOR: (0, 0, 0, 1) (tuple)\n\n</code></pre> <pre><code>- method: core.Canvas\n  cid: 1\n  timestamp: 1723408244.310484\n  parameters: {id: 1, width: 512, height: 512, dpi: 100.0}\n- method: core.Viewport\n  cid: 2\n  timestamp: 1723408244.310533\n  parameters:\n    id: 2\n    canvas: 1\n    x: 0\n    y: 0\n    width: 512\n    height: 512\n    color: !!python/tuple [0, 0, 0, 1]\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1723408244.310484,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 100.0\n      }\n    },\n    {\n      \"method\": \"core.Viewport\",\n      \"id\": 2,\n      \"timestamp\": 1723408244.310533,\n      \"parameters\": {\n        \"id\": 2,\n        \"canvas\": 1,\n        \"x\": 0,\n        \"y\": 0,\n        \"width\": 512,\n        \"height\": 512,\n        \"color\": [\n          0,\n          0,\n          0,\n          1\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>canvas</code> <code>Canvas</code> <p>Canvas where to create the viewport</p> required <code>x</code> <code>int</code> <p>X coordinate of the viewport bottom left corner</p> required <code>y</code> <code>int</code> <p>Y coordinate of the viewport bottom left corner</p> required <code>width</code> <code>int</code> <p>Width of the viewport in pixels.</p> required <code>height</code> <code>int</code> <p>Height of the viewport in pixels.</p> required <code>color</code> <code>tuple</code> <p>Background color of the viewport</p> required"},{"location":"api/core/viewport.html#gsp.core.viewport.Viewport.render","title":"render","text":"<pre><code>render(target: str)\n</code></pre> <p>Render the viewport to the specified target. If no target is specified, return a raw image as bytes.</p> Example PYTHONTEXTYAMLJSON <pre><code>from gsp.core import Canvas, Viewport\ncanvas = Canvas(512, 512, 100.0)\nviewport = Viewport(canvas, 0, 0, 512, 512, (0,0,0,1))\nviewport.render(\"png\")\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"core.Canvas\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.390698 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - DPI: 100.0 (float)\n\n2. COMMAND\n     - METHOD: \"core.Viewport\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.390751 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - CANVAS: 1 (Canvas)\n     - X: 0 (int)\n     - Y: 0 (int)\n     - WIDTH: 512 (int)\n     - HEIGHT: 512 (int)\n     - COLOR: (0, 0, 0, 1) (tuple)\n\n3. COMMAND\n     - METHOD: \"Viewport/render\" (str)\n     - COMMAND_ID: 3 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.390771 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 2 (int)\n     - TARGET: png (str)\n\n</code></pre> <pre><code>- method: core.Canvas\n  cid: 1\n  timestamp: 1723408244.390698\n  parameters: {id: 1, width: 512, height: 512, dpi: 100.0}\n- method: core.Viewport\n  cid: 2\n  timestamp: 1723408244.390751\n  parameters:\n    id: 2\n    canvas: 1\n    x: 0\n    y: 0\n    width: 512\n    height: 512\n    color: !!python/tuple [0, 0, 0, 1]\n- method: Viewport/render\n  cid: 3\n  timestamp: 1723408244.390771\n  parameters: {id: 2, target: png}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"core.Canvas\",\n      \"id\": 1,\n      \"timestamp\": 1723408244.390698,\n      \"parameters\": {\n        \"id\": 1,\n        \"width\": 512,\n        \"height\": 512,\n        \"dpi\": 100.0\n      }\n    },\n    {\n      \"method\": \"core.Viewport\",\n      \"id\": 2,\n      \"timestamp\": 1723408244.390751,\n      \"parameters\": {\n        \"id\": 2,\n        \"canvas\": 1,\n        \"x\": 0,\n        \"y\": 0,\n        \"width\": 512,\n        \"height\": 512,\n        \"color\": [\n          0,\n          0,\n          0,\n          1\n        ]\n      }\n    },\n    {\n      \"method\": \"Viewport/render\",\n      \"id\": 3,\n      \"timestamp\": 1723408244.390771,\n      \"parameters\": {\n        \"id\": 2,\n        \"target\": \"png\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>Filename of the target</p> required"},{"location":"api/io/command.html","title":"Command","text":""},{"location":"api/io/command.html#gsp.io.command.CommandQueue","title":"CommandQueue","text":"<pre><code>CommandQueue(default=True, readonly=False)\n</code></pre> <p>A command queue allows to store a list of Command that can be ran later.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>bool</code> <p>Make this queue the default one.</p> <code>True</code>"},{"location":"api/io/command.html#gsp.io.command.Command","title":"Command","text":"<pre><code>Command(classname, methodname, parameters, annotations)\n</code></pre> <p>Generic command with a unique id.</p> <p>Parameters:</p> Name Type Description Default <code>classname</code> <code>string</code> <p>Name of the class</p> required <code>methodname</code> <code>string</code> <p>Name of the method</p> required <code>parameters</code> <code>dict</code> <p>Dictionnary of parameters</p> required <code>annotations</code> <code>dict</code> <p>Annoated type of the called method</p> required <p>Examples:</p> <pre><code>class Foo(Object):\n    def __init__(self, value : int):\n        self.value = value\n\ncommand = Command(\"Foo\", \"__init__\", {\"value\" : 1})\nfoo = command.execute()\n</code></pre>"},{"location":"api/io/command.html#gsp.io.command.command","title":"command","text":"<pre><code>command(name=None)\n</code></pre> <p>Function decorator that create a command when the function is called and optionally record it and/or write it to stdout. The name of the method it decorates can be overriden with the method argument.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>string</code> <p>Alternative name of the command. If not provided, the actual name is used</p> <code>None</code>"},{"location":"api/transform/accessors.html","title":"Accessors","text":""},{"location":"api/transform/accessors.html#gsp.transform.Accessor","title":"Accessor","text":"<pre><code>Accessor(\n    buffer: Transform | Buffer = None, key: str = None\n)\n</code></pre> <p>Accessor transform allows to access a specific field in a Buffer</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Name of the field to access</p> <code>None</code>"},{"location":"api/transform/accessors.html#gsp.transform.X","title":"X","text":"<pre><code>X(buffer: Transform | Buffer = None)\n</code></pre>"},{"location":"api/transform/accessors.html#gsp.transform.Y","title":"Y","text":"<pre><code>Y(buffer: Transform | Buffer = None)\n</code></pre>"},{"location":"api/transform/accessors.html#gsp.transform.Z","title":"Z","text":"<pre><code>Z(buffer: Transform | Buffer = None)\n</code></pre>"},{"location":"api/transform/accessors.html#gsp.transform.W","title":"W","text":"<pre><code>W(buffer: Transform | Buffer = None)\n</code></pre>"},{"location":"api/transform/accessors.html#gsp.transform.R","title":"R","text":"<pre><code>R(buffer: Transform | Buffer = None)\n</code></pre>"},{"location":"api/transform/accessors.html#gsp.transform.G","title":"G","text":"<pre><code>G(buffer: Transform | Buffer = None)\n</code></pre>"},{"location":"api/transform/accessors.html#gsp.transform.B","title":"B","text":"<pre><code>B(buffer: Transform | Buffer = None)\n</code></pre>"},{"location":"api/transform/accessors.html#gsp.transform.A","title":"A","text":"<pre><code>A(buffer: Transform | Buffer = None)\n</code></pre>"},{"location":"api/transform/colormap.html","title":"Colormap","text":""},{"location":"api/transform/colormap.html#gsp.transform.Colormap","title":"Colormap","text":"<pre><code>Colormap(colormap: str = None)\n</code></pre> <p>Colormap transform allows to map a scalar to a color</p> Example PYTHONTEXTYAMLJSON <pre><code>from gsp.transform import Colormap\ncolormap = Colormap(\"viridis\")\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"transform.Colormap\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.502670 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - COLORMAP: viridis (str)\n\n</code></pre> <pre><code>- method: transform.Colormap\n  cid: 1\n  timestamp: 1723408244.50267\n  parameters: {id: 1, colormap: viridis}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"transform.Colormap\",\n      \"id\": 1,\n      \"timestamp\": 1723408244.50267,\n      \"parameters\": {\n        \"id\": 1,\n        \"colormap\": \"viridis\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>colormap</code> <code>str</code> <p>Name of the colormap</p> <code>None</code>"},{"location":"api/transform/colormap.html#gsp.transform.Colormap.set_colormap","title":"set_colormap","text":"<pre><code>set_colormap(colormap: str)\n</code></pre> <p>Set the colormap</p> Example PYTHONTEXTYAMLJSON <pre><code>from gsp.transform import Colormap\ncolormap = Colormap(\"viridis\")\ncolormap.set_colormap(\"inferno\")\n</code></pre> <pre><code>1. COMMAND\n     - METHOD: \"transform.Colormap\" (str)\n     - COMMAND_ID: 1 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.584927 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - COLORMAP: viridis (str)\n\n2. COMMAND\n     - METHOD: \"Colormap/set_colormap\" (str)\n     - COMMAND_ID: 2 (int)\n     - TIMESTAMP: 2024-08-11T22:30:44.584957 (datetime)\n   PARAMETERS\n     - OBJECT_ID: 1 (int)\n     - COLORMAP: inferno (str)\n\n</code></pre> <pre><code>- method: transform.Colormap\n  cid: 1\n  timestamp: 1723408244.584927\n  parameters: {id: 1, colormap: viridis}\n- method: Colormap/set_colormap\n  cid: 2\n  timestamp: 1723408244.584957\n  parameters: {id: 1, colormap: inferno}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"commands\": [\n    {\n      \"method\": \"transform.Colormap\",\n      \"id\": 1,\n      \"timestamp\": 1723408244.584927,\n      \"parameters\": {\n        \"id\": 1,\n        \"colormap\": \"viridis\"\n      }\n    },\n    {\n      \"method\": \"Colormap/set_colormap\",\n      \"id\": 2,\n      \"timestamp\": 1723408244.584957,\n      \"parameters\": {\n        \"id\": 1,\n        \"colormap\": \"inferno\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>colormap</code> <code>str</code> <p>Name of the colormap</p> required"},{"location":"api/transform/depth.html","title":"Depth","text":""},{"location":"api/transform/depth.html#gsp.transform.Depth","title":"Depth","text":"<pre><code>Depth(buffer: str = 'positions')\n</code></pre> <p>A depth transform is a JIT transform whose output is computed when a visual is rendered. For a visual with n vertices, the output is a Buffer of n floats containing the depth coordinate of each vertices.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>str</code> <p>Name of the buffer from which to extract depth information. This buffer must have been built by a visual.</p> <code>'positions'</code>"},{"location":"api/transform/depth.html#gsp.transform.Depth.evaluate","title":"evaluate","text":"<pre><code>evaluate(buffers: dict)\n</code></pre> <p>Evaluate the transform</p> <p>Parameters:</p> Name Type Description Default <code>buffers</code> <code>dict</code> <p>Dictionary of buffers</p> required"},{"location":"api/transform/faces.html","title":"Faces","text":""},{"location":"api/transform/faces.html#gsp.transform.Faces","title":"Faces","text":"<pre><code>Faces()\n</code></pre> <p>Faces transform is a JIT transform that return the faces buffer when it exists.</p>"},{"location":"api/transform/light.html","title":"Light","text":""},{"location":"api/transform/light.html#gsp.transform.Light","title":"Light","text":"<pre><code>Light(\n    direction: list = (1, 1, 1),\n    ambient_color: Color = (1, 0, 0, 0.2),\n    diffuse_color: Color = (1, 1, 1, 0.8),\n    specular_color: Color = (1, 1, 1, 0),\n)\n</code></pre> <p>Light transform allows to modify faces color according to light parameters</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>list</code> <p>Direction of the light</p> <code>(1, 1, 1)</code> <code>ambient_color</code> <code>Color</code> <p>Ambient color, alpha component being strength</p> <code>(1, 0, 0, 0.2)</code> <code>diffuse_color</code> <code>Color</code> <p>Diffuse color, alpha component being strength</p> <code>(1, 1, 1, 0.8)</code> <code>specular_color</code> <code>Color</code> <p>Specular color, alpha component being shininess</p> <code>(1, 1, 1, 0)</code>"},{"location":"api/transform/measures.html","title":"Measures","text":""},{"location":"api/transform/measures.html#gsp.transform.Measure","title":"Measure","text":"<pre><code>Measure()\n</code></pre> <p>A Measure transform allows to convert a measure expressed in some units (Pixel, Point, Inch, etc.) to normalized device coordinates ([-1,+1] x [-1,+1]). This conversion is always relative to a given Viewport whose width and height dictates the conversion.</p> <p>Notes</p> <p>The normalization of a measure (conversion to NDC) migth be different on the x or y axis depending on the size of the related viewport. This means, for example, that the expression <code>10*pixel</code> is translated differently along <code>x</code> (1st component) and <code>y</code> axis (second component). The <code>z</code> coordinate is not changed during conversion since measures are targeting 2D coordinates.</p> <p>Examples:</p> <pre><code>canvas = core.Canvas(512, 512, 100.0)\nviewport = core.Viewport(canvas, color=(1,1,0,1))\n\n# 10 pixels from bottom left corner\npixel = transform.Pixel()\nP = [-1,-1,0] + 10*pixel\n\n# 10 points from left, 20 points from bottom\npoint = transform.Point()\nP = [-1,-1,0] + (10,20,0)*point\n</code></pre>"},{"location":"api/transform/measures.html#gsp.transform.Pixel","title":"Pixel","text":"<pre><code>Pixel()\n</code></pre> <p>Conversion of a measure to pixel.</p>"},{"location":"api/transform/measures.html#gsp.transform.Point","title":"Point","text":"<pre><code>Point()\n</code></pre> <p>Conversion of a measure to point</p>"},{"location":"api/transform/measures.html#gsp.transform.Inch","title":"Inch","text":"<pre><code>Inch()\n</code></pre> <p>Conversion of a measure to inch.</p>"},{"location":"api/transform/measures.html#gsp.transform.Millimeter","title":"Millimeter","text":"<pre><code>Millimeter()\n</code></pre> <p>Conversion of a measure to millimeter</p>"},{"location":"api/transform/measures.html#gsp.transform.Centimeter","title":"Centimeter","text":"<pre><code>Centimeter()\n</code></pre> <p>Conversion of a measure to centimeter</p>"},{"location":"api/transform/measures.html#gsp.transform.Meter","title":"Meter","text":"<pre><code>Meter()\n</code></pre> <p>Conversion of a measure to meter</p>"},{"location":"api/transform/measures.html#gsp.transform.Kilometer","title":"Kilometer","text":"<pre><code>Kilometer()\n</code></pre> <p>Conversion of a measure to kilometer</p>"},{"location":"api/transform/operators.html","title":"Operators","text":""},{"location":"api/transform/operators.html#gsp.transform.Operator","title":"Operator","text":"<pre><code>Operator(\n    operator: str,\n    left: Transform | Buffer = None,\n    right: Transform | Buffer = None,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator description, one of: <code>+</code> (addition), <code>-</code> (subtraction), <code>/</code> (division), <code>*</code> (mutliplication),</p> required <code>left</code> <code>Transform | Buffer</code> <p>Left operand (transform or buffer)</p> <code>None</code> <code>right</code> <code>Transform | Buffer</code> <p>Right operand (transform or buffer)</p> <code>None</code>"},{"location":"api/transform/operators.html#gsp.transform.Operator.set_operator","title":"set_operator","text":"<pre><code>set_operator(operator: str)\n</code></pre> <p>Set operator</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>str</code> <p>Operator</p> required"},{"location":"api/transform/operators.html#gsp.transform.Operator.set_left","title":"set_left","text":"<pre><code>set_left(left: Transform)\n</code></pre> <p>Set left operand</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>Transform</code> <p>Left operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Operator.set_right","title":"set_right","text":"<pre><code>set_right(right: Transform)\n</code></pre> <p>Set right operand</p> <p>Parameters:</p> Name Type Description Default <code>right</code> <code>Transform</code> <p>Righ operand (transform or buffer)</p> required"},{"location":"api/transform/operators.html#gsp.transform.Add","title":"Add","text":"<pre><code>Add(\n    left: Transform | Buffer = None,\n    right: Transform | Buffer = None,\n)\n</code></pre>"},{"location":"api/transform/operators.html#gsp.transform.Sub","title":"Sub","text":"<pre><code>Sub(\n    left: Transform | Buffer = None,\n    right: Transform | Buffer = None,\n)\n</code></pre>"},{"location":"api/transform/operators.html#gsp.transform.Mul","title":"Mul","text":"<pre><code>Mul(\n    left: Transform | Buffer = None,\n    right: Transform | Buffer = None,\n)\n</code></pre>"},{"location":"api/transform/operators.html#gsp.transform.Div","title":"Div","text":"<pre><code>Div(\n    left: Transform | Buffer = None,\n    right: Transform | Buffer = None,\n)\n</code></pre>"},{"location":"api/transform/screen.html","title":"Screen","text":""},{"location":"api/transform/screen.html#gsp.transform.Screen","title":"Screen","text":"<pre><code>Screen(buffer: str = 'positions')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>str</code> <p>Name of the buffer from which to extract screen information. This buffer must have been built by a visual.</p> <code>'positions'</code>"},{"location":"api/transform/screen.html#gsp.transform.Screen.evaluate","title":"evaluate","text":"<pre><code>evaluate(buffers)\n</code></pre> <p>Evaluate the transform</p> <p>Parameters:</p> Name Type Description Default <code>buffers</code> <p>Dictionary of buffers</p> required"},{"location":"api/transform/screen.html#gsp.transform.ScreenX","title":"ScreenX","text":"<pre><code>ScreenX(buffer: str = 'positions')\n</code></pre> <p>ScreenX transform is a JIT transform that return x screen coordinates.</p>"},{"location":"api/transform/screen.html#gsp.transform.ScreenY","title":"ScreenY","text":"<pre><code>ScreenY(buffer: str = 'positions')\n</code></pre> <p>ScreenY transform is a JIT transform that return y screen coordinates.</p>"},{"location":"api/transform/screen.html#gsp.transform.ScreenZ","title":"ScreenZ","text":"<pre><code>ScreenZ(buffer: str = 'positions')\n</code></pre> <p>ScreenZ transform is a JIT transform that return z (depth) screen coordinates.</p>"},{"location":"api/transform/transform.html","title":"Transform","text":""},{"location":"api/transform/transform.html#gsp.transform.Transform","title":"Transform","text":"<pre><code>Transform(\n    base: Transform = None,\n    next: Transform = None,\n    buffer: Buffer = None,\n)\n</code></pre> <p>and used in place of a Buffer where needed. Several transforms can be chained or composed together.</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on. When non null, all transform parameters are read from the base.</p> <code>None</code> <code>next</code> <code>Transform</code> <p>A transformation can be chained with another transform (<code>next</code>). In such case, the <code>next</code> transform is applied first and result is passed to the current transform.</p> <code>None</code> <code>buffer</code> <code>Buffer</code> <p>Buffer on which to apply the transform. When non null, the transformation is bound and cannot be modified anymore.</p> <code>None</code>"},{"location":"api/transform/transform.html#gsp.transform.Transform.set_base","title":"set_base","text":"<pre><code>set_base(base: Transform = None)\n</code></pre> <p>Set a new base for the transform</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>Transform</code> <p>The base transform this transform is based on</p> <code>None</code>"},{"location":"api/transform/transform.html#gsp.transform.Transform.set_next","title":"set_next","text":"<pre><code>set_next(next: Transform = None)\n</code></pre> <p>Compose transform with <code>next</code> that will be applied before this one.</p> <p>Parameters:</p> Name Type Description Default <code>next</code> <code>Transform</code> <p>Next transform</p> <code>None</code>"},{"location":"api/transform/transform.html#gsp.transform.Transform.set_buffer","title":"set_buffer","text":"<pre><code>set_buffer(buffer: Transform = None)\n</code></pre> <p>Bind the transform to the given buffer.</p> <p>Parameters:</p> Name Type Description Default <code>buffer</code> <code>Buffer</code> <p>Buffer to bind</p> <code>None</code>"}]}